// This code was generated by EntityFramework Reverse POCO Generator (http://www.reversepoco.co.uk/).
// Created by Simon Hughes (https://about.me/simon.hughes).
//
// Registered to: Simon Hughes
// Company      : Reverse POCO
// Licence Type : Commercial
// Licences     : 1
// Valid until  : 15 DEC 2022
//
// The following connection settings were used to generate this file:
//     Connection String Name: "FredDbContext"
//     Connection String:      "Data Source=(local);Initial Catalog=Fred;Integrated Security=True"
//
// Database Edition       : Developer Edition (64-bit)
// Database Engine Edition: Enterprise
// Database Version       : 14.0.2037.2
//
// <auto-generated>
// ReSharper disable All

using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace V3Fred
{
    // table mapping with space
    public class TableMappingWithSpaceConfiguration : IEntityTypeConfiguration<TableMappingWithSpace>
    {
        public void Configure(EntityTypeBuilder<TableMappingWithSpace> builder)
        {
            builder.ToTable("table mapping with space", "dbo");
            builder.HasKey(x => new { x.Id, x.IdValue }).HasName("map_with_space").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"id").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.IdValue).HasColumnName(@"id value").HasColumnType("int").IsRequired().ValueGeneratedNever();

            // Foreign keys
            builder.HasOne(a => a.TableWithSpace).WithMany(b => b.TableMappingWithSpaces).HasForeignKey(c => c.Id).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("space1FK");
            builder.HasOne(a => a.TableWithSpaceAndInColumn).WithMany(b => b.TableMappingWithSpaces).HasForeignKey(c => c.IdValue).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("space2FK");
        }
    }

}
// </auto-generated>
