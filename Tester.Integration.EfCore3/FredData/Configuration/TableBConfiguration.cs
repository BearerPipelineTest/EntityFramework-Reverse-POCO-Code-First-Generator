// This code was generated by EntityFramework Reverse POCO Generator (http://www.reversepoco.co.uk/).
// Created by Simon Hughes (https://about.me/simon.hughes).
//
// Registered to: Simon Hughes
// Company      : Reverse POCO
// Licence Type : Commercial
// Licences     : 1
// Valid until  : 15 DEC 2022
//
// The following connection settings were used to generate this file:
//     Connection String Name: "FredDbContext"
//     Connection String:      "Data Source=(local);Initial Catalog=Fred;Integrated Security=True"
//
// Database Edition       : Developer Edition (64-bit)
// Database Engine Edition: Enterprise
// Database Version       : 14.0.2037.2
//
// <auto-generated>
// ReSharper disable All

using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace V3Fred
{
    // TableB
    public class TableBConfiguration : IEntityTypeConfiguration<TableB>
    {
        public void Configure(EntityTypeBuilder<TableB> builder)
        {
            builder.ToTable("TableB", "dbo");
            builder.HasKey(x => new { x.TableBId, x.TableAId }).HasName("TableB_pkey").IsClustered();

            builder.Property(x => x.TableBId).HasColumnName(@"TableBId").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.TableAId).HasColumnName(@"TableAId").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.ParentTableAId).HasColumnName(@"ParentTableAId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.TableBDesc).HasColumnName(@"TableBDesc").HasColumnType("varchar(20)").IsRequired(false).IsUnicode(false).HasMaxLength(20);

            // Foreign keys
            builder.HasOne(a => a.TableA_TableAId).WithMany(b => b.TableBs).HasForeignKey(c => c.TableAId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_TableA_CompositeKey_Req");
            builder.HasOne(a => a.TableB1).WithOne(b => b.TableB2).HasForeignKey<TableB>(c => new { c.TableAId, c.TableBId }).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("ParentTableB_Hierarchy");

            builder.HasIndex(x => x.TableAId).HasName("fki_ParentTableA_FK_Constraint");
        }
    }

}
// </auto-generated>
