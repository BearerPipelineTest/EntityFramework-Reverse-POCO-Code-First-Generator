// <auto-generated>

using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.Design;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using Microsoft.EntityFrameworkCore.Query;
using Microsoft.EntityFrameworkCore.Query.Internal;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Data;
using System.Data.SqlTypes;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Threading;
using System.Threading.Tasks;

namespace Efrpg.V3TestK
{
    #region Database context interface

    public interface IFredDbContext : IDisposable
    {
        DbSet<A> A { get; set; } // A
        DbSet<Aaref> Aarefs { get; set; } // AAREF
        DbSet<AbOrderLinesAb> AbOrderLinesAbs { get; set; } // AB_OrderLinesAB_
        DbSet<AbOrdersAb> AbOrdersAbs { get; set; } // AB_OrdersAB_
        DbSet<Alpha_Harish3485> Alpha_Harish3485 { get; set; } // Harish3485
        DbSet<Alpha_Workflow> Alpha_Workflows { get; set; } // workflow
        DbSet<App_UserFacilityServiceRole> App_UserFacilityServiceRoles { get; set; } // UserFacilityServiceRole
        DbSet<AppUser> AppUsers { get; set; } // AppUser
        DbSet<Attendee> Attendees { get; set; } // Attendee
        DbSet<BatchTest> BatchTests { get; set; } // BatchTest
        DbSet<Beta_Harish3485> Beta_Harish3485 { get; set; } // Harish3485
        DbSet<Beta_ToAlpha> Beta_ToAlphas { get; set; } // ToAlpha
        DbSet<Beta_Workflow> Beta_Workflows { get; set; } // workflow
        DbSet<Bitfiddlerallcap> Bitfiddlerallcaps { get; set; } // BITFIDDLERALLCAPS
        DbSet<BitFiddlerCategoRy> BitFiddlerCategoRies { get; set; } // BitFiddlerCATEGORIES
        DbSet<BitFiddlerCurrenCy> BitFiddlerCurrenCies { get; set; } // BitFiddlerCURRENCIES
        DbSet<Blah> Blahs { get; set; } // Blah
        DbSet<BlahBlahLinkReadonly> BlahBlahLinkReadonlies { get; set; } // BlahBlahLink_readonly
        DbSet<BlahBlahLinkV2> BlahBlahLinkV2 { get; set; } // BlahBlahLink_v2
        DbSet<Blarg> Blargs { get; set; } // Blarg
        DbSet<BringTheAction> BringTheActions { get; set; } // BringTheAction
        DbSet<Burak1> Burak1 { get; set; } // Burak1
        DbSet<Burak2> Burak2 { get; set; } // Burak2
        DbSet<CalculatedColumnNotNull> CalculatedColumnNotNulls { get; set; } // CalculatedColumnNotNull
        DbSet<Car> Cars { get; set; } // Car
        DbSet<ClientCreationState> ClientCreationStates { get; set; } // ClientCreationState
        DbSet<CmsFile> CmsFiles { get; set; } // CMS_File
        DbSet<CmsTag> CmsTags { get; set; } // CMS_Tag
        DbSet<CodeMeetingTopicDetail> CodeMeetingTopicDetails { get; set; } // CODE_MeetingTopicDetails
        DbSet<CodeObject> CodeObjects { get; set; } // CodeObject
        DbSet<CodeParamMeetingTopicDetailSource> CodeParamMeetingTopicDetailSources { get; set; } // CODE_PARAM_MeetingTopicDetailSource
        DbSet<Colour> Colours { get; set; } // Colour
        DbSet<Company> Companies { get; set; } // Company
        DbSet<CompanyGroup> CompanyGroups { get; set; } // CompanyGroup
        DbSet<Country> Countries { get; set; } // Country
        DbSet<DateTimeDefaultTest> DateTimeDefaultTests { get; set; } // DateTimeDefaultTest
        DbSet<DboProcDataFromFfrsAndDboReturnModel> DboProcDataFromFfrsAndDboReturnModels { get; set; } // DboProcDataFromFfrsAndDboReturnModel
        DbSet<DboProcDataFromFfrsReturnModel> DboProcDataFromFfrsReturnModels { get; set; } // DboProcDataFromFfrsReturnModel
        DbSet<DefaultCheckForNull> DefaultCheckForNulls { get; set; } // DefaultCheckForNull
        DbSet<DsOpe> DsOpes { get; set; } // DSOpe
        DbSet<DsOpeProcReturnModel> DsOpeProcReturnModels { get; set; } // DsOpeProcReturnModel
        DbSet<EnumWithDefaultValue> EnumWithDefaultValues { get; set; } // EnumWithDefaultValue
        DbSet<EventProcessor> EventProcessors { get; set; } // EventProcessor
        DbSet<EventProcessorEventFilter> EventProcessorEventFilters { get; set; } // EventProcessorEventFilter
        DbSet<FFRS_Cv> FFRS_Cvs { get; set; } // CV
        DbSet<FfrsCvDataReturnModel> FfrsCvDataReturnModels { get; set; } // FFRS_CvDataReturnModel
        DbSet<FfrsDataFromDboAndFfrsReturnModel> FfrsDataFromDboAndFfrsReturnModels { get; set; } // FFRS_DataFromDboAndFfrsReturnModel
        DbSet<FfrsDataFromDboReturnModel> FfrsDataFromDboReturnModels { get; set; } // FFRS_DataFromDboReturnModel
        DbSet<FinancialInstitutionOffice> FinancialInstitutionOffices { get; set; } // FinancialInstitutionOffice
        DbSet<Footer> Footers { get; set; } // footer
        DbSet<ForeignKeyIsNotEnforced> ForeignKeyIsNotEnforceds { get; set; } // ForeignKeyIsNotEnforced
        DbSet<ForeignKeyIsNotEnforcedItem> ForeignKeyIsNotEnforcedItems { get; set; } // ForeignKeyIsNotEnforcedItem
        DbSet<GetScreamAndShoutReturnModel> GetScreamAndShoutReturnModels { get; set; } // GetScreamAndShoutReturnModel
        DbSet<HasPrincipalKeyTestChild> HasPrincipalKeyTestChilds { get; set; } // HasPrincipalKeyTestChild
        DbSet<HasPrincipalKeyTestParent> HasPrincipalKeyTestParents { get; set; } // HasPrincipalKeyTestParent
        DbSet<Header> Headers { get; set; } // header
        DbSet<HierarchyTest> HierarchyTests { get; set; } // hierarchy_test
        DbSet<Issue47_Role> Issue47_Roles { get; set; } // Role
        DbSet<Issue47_User> Issue47_Users { get; set; } // Users
        DbSet<Issue47_UserRole> Issue47_UserRoles { get; set; } // UserRoles
        DbSet<Kate_ScreamAndShout> Kate_ScreamAndShouts { get; set; } // ScreamAndShout
        DbSet<MultipleKey> MultipleKeys { get; set; } // MultipleKeys
        DbSet<OneEightSix_Issue> OneEightSix_Issues { get; set; } // Issue
        DbSet<OneEightSix_UploadedFile> OneEightSix_UploadedFiles { get; set; } // UploadedFile
        DbSet<PeriodTestTable> PeriodTestTables { get; set; } // PeriodTestTable
        DbSet<Person> People { get; set; } // Person
        DbSet<PersonPost> PersonPosts { get; set; } // PersonPosts
        DbSet<PkOrdinalTest> PkOrdinalTests { get; set; } // pk_ordinal_test
        DbSet<PropertyTypesToAdd> PropertyTypesToAdds { get; set; } // PropertyTypesToAdd
        DbSet<RebelGalaxyBroadside> RebelGalaxyBroadsides { get; set; } // RebelGalaxyBroadsides
        DbSet<RebelGalaxyShip> RebelGalaxyShips { get; set; } // RebelGalaxyShips
        DbSet<RebelGalaxyWeapon> RebelGalaxyWeapons { get; set; } // RebelGalaxyWeapons
        DbSet<ScreamAndShout> ScreamAndShouts { get; set; } // ScreamAndShout
        DbSet<SequenceTest> SequenceTests { get; set; } // SequenceTest
        DbSet<SpatialTypesNoParamsReturnModel> SpatialTypesNoParamsReturnModels { get; set; } // SpatialTypesNoParamsReturnModel
        DbSet<StockPrediction> StockPredictions { get; set; } // StockPrediction
        DbSet<StpNoParamsTestReturnModel> StpNoParamsTestReturnModels { get; set; } // StpNoParamsTestReturnModel
        DbSet<StpNullableParamsTestReturnModel> StpNullableParamsTestReturnModels { get; set; } // StpNullableParamsTestReturnModel
        DbSet<StpTestReturnModel> StpTestReturnModels { get; set; } // StpTestReturnModel
        DbSet<StpTestUnderscoreTestReturnModel> StpTestUnderscoreTestReturnModels { get; set; } // StpTestUnderscoreTestReturnModel
        DbSet<TableA> TableAs { get; set; } // TableA
        DbSet<TableB> TableBs { get; set; } // TableB
        DbSet<TableWithDuplicateColumnName> TableWithDuplicateColumnNames { get; set; } // table with duplicate column names
        DbSet<TableWithSpace> TableWithSpaces { get; set; } // table with space
        DbSet<TableWithSpaceAndInColumn> TableWithSpaceAndInColumns { get; set; } // table with space and in columns
        DbSet<TableWithSpaceInColumnOnly> TableWithSpaceInColumnOnlies { get; set; } // TableWithSpaceInColumnOnly
        DbSet<TadeuszSobol> TadeuszSobols { get; set; } // TadeuszSobol
        DbSet<Task1> Task1 { get; set; } // Task
        DbSet<TblOrder> TblOrders { get; set; } // tblOrders
        DbSet<TblOrderError> TblOrderErrors { get; set; } // tblOrderErrors
        DbSet<TblOrderErrorsAb> TblOrderErrorsAbs { get; set; } // tblOrderErrorsAB_
        DbSet<TblOrderLine> TblOrderLines { get; set; } // tblOrderLines
        DbSet<Ticket> Tickets { get; set; } // Ticket
        DbSet<Token> Tokens { get; set; } // Token
        DbSet<User> Users { get; set; } // User
        DbSet<User309> User309 { get; set; } // User309
        DbSet<UserDocument> UserDocuments { get; set; } // User_Document

        int SaveChanges();
        int SaveChanges(bool acceptAllChangesOnSuccess);
        Task<int> SaveChangesAsync(CancellationToken cancellationToken = default(CancellationToken));
        Task<int> SaveChangesAsync(bool acceptAllChangesOnSuccess, CancellationToken cancellationToken = default(CancellationToken));
        DatabaseFacade Database { get; }
        DbSet<TEntity> Set<TEntity>() where TEntity : class;
        string ToString();

        EntityEntry Add(object entity);
        EntityEntry<TEntity> Add<TEntity>(TEntity entity) where TEntity : class;
        Task AddRangeAsync(params object[] entities);
        Task AddRangeAsync(IEnumerable<object> entities, CancellationToken cancellationToken = default);
        ValueTask<EntityEntry<TEntity>> AddAsync<TEntity>(TEntity entity, CancellationToken cancellationToken = default) where TEntity : class;
        ValueTask<EntityEntry> AddAsync(object entity, CancellationToken cancellationToken = default);
        void AddRange(IEnumerable<object> entities);
        void AddRange(params object[] entities);

        EntityEntry Attach(object entity);
        EntityEntry<TEntity> Attach<TEntity>(TEntity entity) where TEntity : class;
        void AttachRange(IEnumerable<object> entities);
        void AttachRange(params object[] entities);

        EntityEntry Entry(object entity);
        EntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class;

        TEntity Find<TEntity>(params object[] keyValues) where TEntity : class;
        ValueTask<TEntity> FindAsync<TEntity>(object[] keyValues, CancellationToken cancellationToken) where TEntity : class;
        ValueTask<TEntity> FindAsync<TEntity>(params object[] keyValues) where TEntity : class;
        ValueTask<object> FindAsync(Type entityType, object[] keyValues, CancellationToken cancellationToken);
        ValueTask<object> FindAsync(Type entityType, params object[] keyValues);
        object Find(Type entityType, params object[] keyValues);

        EntityEntry Remove(object entity);
        EntityEntry<TEntity> Remove<TEntity>(TEntity entity) where TEntity : class;
        void RemoveRange(IEnumerable<object> entities);
        void RemoveRange(params object[] entities);

        EntityEntry Update(object entity);
        EntityEntry<TEntity> Update<TEntity>(TEntity entity) where TEntity : class;
        void UpdateRange(IEnumerable<object> entities);
        void UpdateRange(params object[] entities);

        IQueryable<TResult> FromExpression<TResult> (Expression<Func<IQueryable<TResult>>> expression);
    }

    #endregion

    #region Database context

    public class FredDbContext : DbContext, IFredDbContext
    {
        public FredDbContext()
        {
        }

        public FredDbContext(DbContextOptions<FredDbContext> options)
            : base(options)
        {
        }

        public DbSet<A> A { get; set; } // A
        public DbSet<Aaref> Aarefs { get; set; } // AAREF
        public DbSet<AbOrderLinesAb> AbOrderLinesAbs { get; set; } // AB_OrderLinesAB_
        public DbSet<AbOrdersAb> AbOrdersAbs { get; set; } // AB_OrdersAB_
        public DbSet<Alpha_Harish3485> Alpha_Harish3485 { get; set; } // Harish3485
        public DbSet<Alpha_Workflow> Alpha_Workflows { get; set; } // workflow
        public DbSet<App_UserFacilityServiceRole> App_UserFacilityServiceRoles { get; set; } // UserFacilityServiceRole
        public DbSet<AppUser> AppUsers { get; set; } // AppUser
        public DbSet<Attendee> Attendees { get; set; } // Attendee
        public DbSet<BatchTest> BatchTests { get; set; } // BatchTest
        public DbSet<Beta_Harish3485> Beta_Harish3485 { get; set; } // Harish3485
        public DbSet<Beta_ToAlpha> Beta_ToAlphas { get; set; } // ToAlpha
        public DbSet<Beta_Workflow> Beta_Workflows { get; set; } // workflow
        public DbSet<Bitfiddlerallcap> Bitfiddlerallcaps { get; set; } // BITFIDDLERALLCAPS
        public DbSet<BitFiddlerCategoRy> BitFiddlerCategoRies { get; set; } // BitFiddlerCATEGORIES
        public DbSet<BitFiddlerCurrenCy> BitFiddlerCurrenCies { get; set; } // BitFiddlerCURRENCIES
        public DbSet<Blah> Blahs { get; set; } // Blah
        public DbSet<BlahBlahLinkReadonly> BlahBlahLinkReadonlies { get; set; } // BlahBlahLink_readonly
        public DbSet<BlahBlahLinkV2> BlahBlahLinkV2 { get; set; } // BlahBlahLink_v2
        public DbSet<Blarg> Blargs { get; set; } // Blarg
        public DbSet<BringTheAction> BringTheActions { get; set; } // BringTheAction
        public DbSet<Burak1> Burak1 { get; set; } // Burak1
        public DbSet<Burak2> Burak2 { get; set; } // Burak2
        public DbSet<CalculatedColumnNotNull> CalculatedColumnNotNulls { get; set; } // CalculatedColumnNotNull
        public DbSet<Car> Cars { get; set; } // Car
        public DbSet<ClientCreationState> ClientCreationStates { get; set; } // ClientCreationState
        public DbSet<CmsFile> CmsFiles { get; set; } // CMS_File
        public DbSet<CmsTag> CmsTags { get; set; } // CMS_Tag
        public DbSet<CodeMeetingTopicDetail> CodeMeetingTopicDetails { get; set; } // CODE_MeetingTopicDetails
        public DbSet<CodeObject> CodeObjects { get; set; } // CodeObject
        public DbSet<CodeParamMeetingTopicDetailSource> CodeParamMeetingTopicDetailSources { get; set; } // CODE_PARAM_MeetingTopicDetailSource
        public DbSet<Colour> Colours { get; set; } // Colour
        public DbSet<Company> Companies { get; set; } // Company
        public DbSet<CompanyGroup> CompanyGroups { get; set; } // CompanyGroup
        public DbSet<Country> Countries { get; set; } // Country
        public DbSet<DateTimeDefaultTest> DateTimeDefaultTests { get; set; } // DateTimeDefaultTest
        public DbSet<DboProcDataFromFfrsAndDboReturnModel> DboProcDataFromFfrsAndDboReturnModels { get; set; } // DboProcDataFromFfrsAndDboReturnModel
        public DbSet<DboProcDataFromFfrsReturnModel> DboProcDataFromFfrsReturnModels { get; set; } // DboProcDataFromFfrsReturnModel
        public DbSet<DefaultCheckForNull> DefaultCheckForNulls { get; set; } // DefaultCheckForNull
        public DbSet<DsOpe> DsOpes { get; set; } // DSOpe
        public DbSet<DsOpeProcReturnModel> DsOpeProcReturnModels { get; set; } // DsOpeProcReturnModel
        public DbSet<EnumWithDefaultValue> EnumWithDefaultValues { get; set; } // EnumWithDefaultValue
        public DbSet<EventProcessor> EventProcessors { get; set; } // EventProcessor
        public DbSet<EventProcessorEventFilter> EventProcessorEventFilters { get; set; } // EventProcessorEventFilter
        public DbSet<FFRS_Cv> FFRS_Cvs { get; set; } // CV
        public DbSet<FfrsCvDataReturnModel> FfrsCvDataReturnModels { get; set; } // FFRS_CvDataReturnModel
        public DbSet<FfrsDataFromDboAndFfrsReturnModel> FfrsDataFromDboAndFfrsReturnModels { get; set; } // FFRS_DataFromDboAndFfrsReturnModel
        public DbSet<FfrsDataFromDboReturnModel> FfrsDataFromDboReturnModels { get; set; } // FFRS_DataFromDboReturnModel
        public DbSet<FinancialInstitutionOffice> FinancialInstitutionOffices { get; set; } // FinancialInstitutionOffice
        public DbSet<Footer> Footers { get; set; } // footer
        public DbSet<ForeignKeyIsNotEnforced> ForeignKeyIsNotEnforceds { get; set; } // ForeignKeyIsNotEnforced
        public DbSet<ForeignKeyIsNotEnforcedItem> ForeignKeyIsNotEnforcedItems { get; set; } // ForeignKeyIsNotEnforcedItem
        public DbSet<GetScreamAndShoutReturnModel> GetScreamAndShoutReturnModels { get; set; } // GetScreamAndShoutReturnModel
        public DbSet<HasPrincipalKeyTestChild> HasPrincipalKeyTestChilds { get; set; } // HasPrincipalKeyTestChild
        public DbSet<HasPrincipalKeyTestParent> HasPrincipalKeyTestParents { get; set; } // HasPrincipalKeyTestParent
        public DbSet<Header> Headers { get; set; } // header
        public DbSet<HierarchyTest> HierarchyTests { get; set; } // hierarchy_test
        public DbSet<Issue47_Role> Issue47_Roles { get; set; } // Role
        public DbSet<Issue47_User> Issue47_Users { get; set; } // Users
        public DbSet<Issue47_UserRole> Issue47_UserRoles { get; set; } // UserRoles
        public DbSet<Kate_ScreamAndShout> Kate_ScreamAndShouts { get; set; } // ScreamAndShout
        public DbSet<MultipleKey> MultipleKeys { get; set; } // MultipleKeys
        public DbSet<OneEightSix_Issue> OneEightSix_Issues { get; set; } // Issue
        public DbSet<OneEightSix_UploadedFile> OneEightSix_UploadedFiles { get; set; } // UploadedFile
        public DbSet<PeriodTestTable> PeriodTestTables { get; set; } // PeriodTestTable
        public DbSet<Person> People { get; set; } // Person
        public DbSet<PersonPost> PersonPosts { get; set; } // PersonPosts
        public DbSet<PkOrdinalTest> PkOrdinalTests { get; set; } // pk_ordinal_test
        public DbSet<PropertyTypesToAdd> PropertyTypesToAdds { get; set; } // PropertyTypesToAdd
        public DbSet<RebelGalaxyBroadside> RebelGalaxyBroadsides { get; set; } // RebelGalaxyBroadsides
        public DbSet<RebelGalaxyShip> RebelGalaxyShips { get; set; } // RebelGalaxyShips
        public DbSet<RebelGalaxyWeapon> RebelGalaxyWeapons { get; set; } // RebelGalaxyWeapons
        public DbSet<ScreamAndShout> ScreamAndShouts { get; set; } // ScreamAndShout
        public DbSet<SequenceTest> SequenceTests { get; set; } // SequenceTest
        public DbSet<SpatialTypesNoParamsReturnModel> SpatialTypesNoParamsReturnModels { get; set; } // SpatialTypesNoParamsReturnModel
        public DbSet<StockPrediction> StockPredictions { get; set; } // StockPrediction
        public DbSet<StpNoParamsTestReturnModel> StpNoParamsTestReturnModels { get; set; } // StpNoParamsTestReturnModel
        public DbSet<StpNullableParamsTestReturnModel> StpNullableParamsTestReturnModels { get; set; } // StpNullableParamsTestReturnModel
        public DbSet<StpTestReturnModel> StpTestReturnModels { get; set; } // StpTestReturnModel
        public DbSet<StpTestUnderscoreTestReturnModel> StpTestUnderscoreTestReturnModels { get; set; } // StpTestUnderscoreTestReturnModel
        public DbSet<TableA> TableAs { get; set; } // TableA
        public DbSet<TableB> TableBs { get; set; } // TableB
        public DbSet<TableWithDuplicateColumnName> TableWithDuplicateColumnNames { get; set; } // table with duplicate column names
        public DbSet<TableWithSpace> TableWithSpaces { get; set; } // table with space
        public DbSet<TableWithSpaceAndInColumn> TableWithSpaceAndInColumns { get; set; } // table with space and in columns
        public DbSet<TableWithSpaceInColumnOnly> TableWithSpaceInColumnOnlies { get; set; } // TableWithSpaceInColumnOnly
        public DbSet<TadeuszSobol> TadeuszSobols { get; set; } // TadeuszSobol
        public DbSet<Task1> Task1 { get; set; } // Task
        public DbSet<TblOrder> TblOrders { get; set; } // tblOrders
        public DbSet<TblOrderError> TblOrderErrors { get; set; } // tblOrderErrors
        public DbSet<TblOrderErrorsAb> TblOrderErrorsAbs { get; set; } // tblOrderErrorsAB_
        public DbSet<TblOrderLine> TblOrderLines { get; set; } // tblOrderLines
        public DbSet<Ticket> Tickets { get; set; } // Ticket
        public DbSet<Token> Tokens { get; set; } // Token
        public DbSet<User> Users { get; set; } // User
        public DbSet<User309> User309 { get; set; } // User309
        public DbSet<UserDocument> UserDocuments { get; set; } // User_Document

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                optionsBuilder.UseSqlServer(@"Data Source=(local);Initial Catalog=fred;Integrated Security=True;Application Name=Generator", x => x.UseNetTopologySuite());
            }
        }

        public bool IsSqlParameterNull(SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == DBNull.Value);
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.HasSequence<int>("CountBy1", "dbo").StartsAt(1).IncrementsBy(1).IsCyclic(false);
            modelBuilder.HasSequence<long>("CountByBigInt", "dbo").StartsAt(22).IncrementsBy(234).IsCyclic(true).HasMin(1).HasMax(9876543);
            modelBuilder.HasSequence<decimal>("CountByDecimal", "dbo").StartsAt(593).IncrementsBy(82).IsCyclic(false).HasMin(5).HasMax(777777);
            modelBuilder.HasSequence<decimal>("CountByNumeric", "dbo").StartsAt(789).IncrementsBy(987).IsCyclic(false).HasMin(345).HasMax(999999999999999999);
            modelBuilder.HasSequence<short>("CountBySmallInt", "dbo").StartsAt(44).IncrementsBy(456).IsCyclic(true);
            modelBuilder.HasSequence<byte>("CountByTinyInt", "dbo").StartsAt(33).IncrementsBy(3).IsCyclic(false);

            modelBuilder.ApplyConfiguration(new AConfiguration());
            modelBuilder.ApplyConfiguration(new AarefConfiguration());
            modelBuilder.ApplyConfiguration(new AbOrderLinesAbConfiguration());
            modelBuilder.ApplyConfiguration(new AbOrdersAbConfiguration());
            modelBuilder.ApplyConfiguration(new Alpha_Harish3485Configuration());
            modelBuilder.ApplyConfiguration(new Alpha_WorkflowConfiguration());
            modelBuilder.ApplyConfiguration(new App_UserFacilityServiceRoleConfiguration());
            modelBuilder.ApplyConfiguration(new AppUserConfiguration());
            modelBuilder.ApplyConfiguration(new AttendeeConfiguration());
            modelBuilder.ApplyConfiguration(new BatchTestConfiguration());
            modelBuilder.ApplyConfiguration(new Beta_Harish3485Configuration());
            modelBuilder.ApplyConfiguration(new Beta_ToAlphaConfiguration());
            modelBuilder.ApplyConfiguration(new Beta_WorkflowConfiguration());
            modelBuilder.ApplyConfiguration(new BitfiddlerallcapConfiguration());
            modelBuilder.ApplyConfiguration(new BitFiddlerCategoRyConfiguration());
            modelBuilder.ApplyConfiguration(new BitFiddlerCurrenCyConfiguration());
            modelBuilder.ApplyConfiguration(new BlahConfiguration());
            modelBuilder.ApplyConfiguration(new BlahBlahLinkReadonlyConfiguration());
            modelBuilder.ApplyConfiguration(new BlahBlahLinkV2Configuration());
            modelBuilder.ApplyConfiguration(new BlargConfiguration());
            modelBuilder.ApplyConfiguration(new BringTheActionConfiguration());
            modelBuilder.ApplyConfiguration(new Burak1Configuration());
            modelBuilder.ApplyConfiguration(new Burak2Configuration());
            modelBuilder.ApplyConfiguration(new CalculatedColumnNotNullConfiguration());
            modelBuilder.ApplyConfiguration(new CarConfiguration());
            modelBuilder.ApplyConfiguration(new ClientCreationStateConfiguration());
            modelBuilder.ApplyConfiguration(new CmsFileConfiguration());
            modelBuilder.ApplyConfiguration(new CmsTagConfiguration());
            modelBuilder.ApplyConfiguration(new CodeMeetingTopicDetailConfiguration());
            modelBuilder.ApplyConfiguration(new CodeObjectConfiguration());
            modelBuilder.ApplyConfiguration(new CodeParamMeetingTopicDetailSourceConfiguration());
            modelBuilder.ApplyConfiguration(new ColourConfiguration());
            modelBuilder.ApplyConfiguration(new CompanyConfiguration());
            modelBuilder.ApplyConfiguration(new CompanyGroupConfiguration());
            modelBuilder.ApplyConfiguration(new CountryConfiguration());
            modelBuilder.ApplyConfiguration(new DateTimeDefaultTestConfiguration());
            modelBuilder.ApplyConfiguration(new DboProcDataFromFfrsAndDboReturnModelConfiguration());
            modelBuilder.ApplyConfiguration(new DboProcDataFromFfrsReturnModelConfiguration());
            modelBuilder.ApplyConfiguration(new DefaultCheckForNullConfiguration());
            modelBuilder.ApplyConfiguration(new DsOpeConfiguration());
            modelBuilder.ApplyConfiguration(new DsOpeProcReturnModelConfiguration());
            modelBuilder.ApplyConfiguration(new EnumWithDefaultValueConfiguration());
            modelBuilder.ApplyConfiguration(new EventProcessorConfiguration());
            modelBuilder.ApplyConfiguration(new EventProcessorEventFilterConfiguration());
            modelBuilder.ApplyConfiguration(new FFRS_CvConfiguration());
            modelBuilder.ApplyConfiguration(new FfrsCvDataReturnModelConfiguration());
            modelBuilder.ApplyConfiguration(new FfrsDataFromDboAndFfrsReturnModelConfiguration());
            modelBuilder.ApplyConfiguration(new FfrsDataFromDboReturnModelConfiguration());
            modelBuilder.ApplyConfiguration(new FinancialInstitutionOfficeConfiguration());
            modelBuilder.ApplyConfiguration(new FooterConfiguration());
            modelBuilder.ApplyConfiguration(new ForeignKeyIsNotEnforcedConfiguration());
            modelBuilder.ApplyConfiguration(new ForeignKeyIsNotEnforcedItemConfiguration());
            modelBuilder.ApplyConfiguration(new GetScreamAndShoutReturnModelConfiguration());
            modelBuilder.ApplyConfiguration(new HasPrincipalKeyTestChildConfiguration());
            modelBuilder.ApplyConfiguration(new HasPrincipalKeyTestParentConfiguration());
            modelBuilder.ApplyConfiguration(new HeaderConfiguration());
            modelBuilder.ApplyConfiguration(new HierarchyTestConfiguration());
            modelBuilder.ApplyConfiguration(new Issue47_RoleConfiguration());
            modelBuilder.ApplyConfiguration(new Issue47_UserConfiguration());
            modelBuilder.ApplyConfiguration(new Issue47_UserRoleConfiguration());
            modelBuilder.ApplyConfiguration(new Kate_ScreamAndShoutConfiguration());
            modelBuilder.ApplyConfiguration(new MultipleKeyConfiguration());
            modelBuilder.ApplyConfiguration(new OneEightSix_IssueConfiguration());
            modelBuilder.ApplyConfiguration(new OneEightSix_UploadedFileConfiguration());
            modelBuilder.ApplyConfiguration(new PeriodTestTableConfiguration());
            modelBuilder.ApplyConfiguration(new PersonConfiguration());
            modelBuilder.ApplyConfiguration(new PersonPostConfiguration());
            modelBuilder.ApplyConfiguration(new PkOrdinalTestConfiguration());
            modelBuilder.ApplyConfiguration(new PropertyTypesToAddConfiguration());
            modelBuilder.ApplyConfiguration(new RebelGalaxyBroadsideConfiguration());
            modelBuilder.ApplyConfiguration(new RebelGalaxyShipConfiguration());
            modelBuilder.ApplyConfiguration(new RebelGalaxyWeaponConfiguration());
            modelBuilder.ApplyConfiguration(new ScreamAndShoutConfiguration());
            modelBuilder.ApplyConfiguration(new SequenceTestConfiguration());
            modelBuilder.ApplyConfiguration(new SpatialTypesNoParamsReturnModelConfiguration());
            modelBuilder.ApplyConfiguration(new StockPredictionConfiguration());
            modelBuilder.ApplyConfiguration(new StpNoParamsTestReturnModelConfiguration());
            modelBuilder.ApplyConfiguration(new StpNullableParamsTestReturnModelConfiguration());
            modelBuilder.ApplyConfiguration(new StpTestReturnModelConfiguration());
            modelBuilder.ApplyConfiguration(new StpTestUnderscoreTestReturnModelConfiguration());
            modelBuilder.ApplyConfiguration(new TableAConfiguration());
            modelBuilder.ApplyConfiguration(new TableBConfiguration());
            modelBuilder.ApplyConfiguration(new TableWithDuplicateColumnNameConfiguration());
            modelBuilder.ApplyConfiguration(new TableWithSpaceConfiguration());
            modelBuilder.ApplyConfiguration(new TableWithSpaceAndInColumnConfiguration());
            modelBuilder.ApplyConfiguration(new TableWithSpaceInColumnOnlyConfiguration());
            modelBuilder.ApplyConfiguration(new TadeuszSobolConfiguration());
            modelBuilder.ApplyConfiguration(new Task1Configuration());
            modelBuilder.ApplyConfiguration(new TblOrderConfiguration());
            modelBuilder.ApplyConfiguration(new TblOrderErrorConfiguration());
            modelBuilder.ApplyConfiguration(new TblOrderErrorsAbConfiguration());
            modelBuilder.ApplyConfiguration(new TblOrderLineConfiguration());
            modelBuilder.ApplyConfiguration(new TicketConfiguration());
            modelBuilder.ApplyConfiguration(new TokenConfiguration());
            modelBuilder.ApplyConfiguration(new UserConfiguration());
            modelBuilder.ApplyConfiguration(new User309Configuration());
            modelBuilder.ApplyConfiguration(new UserDocumentConfiguration());
        }

    }

    #endregion

    #region Database context factory

    public class FredDbContextFactory : IDesignTimeDbContextFactory<FredDbContext>
    {
        public FredDbContext CreateDbContext(string[] args)
        {
            return new FredDbContext();
        }
    }

    #endregion

    #region Fake Database context

    public class FakeFredDbContext : IFredDbContext
    {
        public DbSet<A> A { get; set; } // A
        public DbSet<Aaref> Aarefs { get; set; } // AAREF
        public DbSet<AbOrderLinesAb> AbOrderLinesAbs { get; set; } // AB_OrderLinesAB_
        public DbSet<AbOrdersAb> AbOrdersAbs { get; set; } // AB_OrdersAB_
        public DbSet<Alpha_Harish3485> Alpha_Harish3485 { get; set; } // Harish3485
        public DbSet<Alpha_Workflow> Alpha_Workflows { get; set; } // workflow
        public DbSet<App_UserFacilityServiceRole> App_UserFacilityServiceRoles { get; set; } // UserFacilityServiceRole
        public DbSet<AppUser> AppUsers { get; set; } // AppUser
        public DbSet<Attendee> Attendees { get; set; } // Attendee
        public DbSet<BatchTest> BatchTests { get; set; } // BatchTest
        public DbSet<Beta_Harish3485> Beta_Harish3485 { get; set; } // Harish3485
        public DbSet<Beta_ToAlpha> Beta_ToAlphas { get; set; } // ToAlpha
        public DbSet<Beta_Workflow> Beta_Workflows { get; set; } // workflow
        public DbSet<Bitfiddlerallcap> Bitfiddlerallcaps { get; set; } // BITFIDDLERALLCAPS
        public DbSet<BitFiddlerCategoRy> BitFiddlerCategoRies { get; set; } // BitFiddlerCATEGORIES
        public DbSet<BitFiddlerCurrenCy> BitFiddlerCurrenCies { get; set; } // BitFiddlerCURRENCIES
        public DbSet<Blah> Blahs { get; set; } // Blah
        public DbSet<BlahBlahLinkReadonly> BlahBlahLinkReadonlies { get; set; } // BlahBlahLink_readonly
        public DbSet<BlahBlahLinkV2> BlahBlahLinkV2 { get; set; } // BlahBlahLink_v2
        public DbSet<Blarg> Blargs { get; set; } // Blarg
        public DbSet<BringTheAction> BringTheActions { get; set; } // BringTheAction
        public DbSet<Burak1> Burak1 { get; set; } // Burak1
        public DbSet<Burak2> Burak2 { get; set; } // Burak2
        public DbSet<CalculatedColumnNotNull> CalculatedColumnNotNulls { get; set; } // CalculatedColumnNotNull
        public DbSet<Car> Cars { get; set; } // Car
        public DbSet<ClientCreationState> ClientCreationStates { get; set; } // ClientCreationState
        public DbSet<CmsFile> CmsFiles { get; set; } // CMS_File
        public DbSet<CmsTag> CmsTags { get; set; } // CMS_Tag
        public DbSet<CodeMeetingTopicDetail> CodeMeetingTopicDetails { get; set; } // CODE_MeetingTopicDetails
        public DbSet<CodeObject> CodeObjects { get; set; } // CodeObject
        public DbSet<CodeParamMeetingTopicDetailSource> CodeParamMeetingTopicDetailSources { get; set; } // CODE_PARAM_MeetingTopicDetailSource
        public DbSet<Colour> Colours { get; set; } // Colour
        public DbSet<Company> Companies { get; set; } // Company
        public DbSet<CompanyGroup> CompanyGroups { get; set; } // CompanyGroup
        public DbSet<Country> Countries { get; set; } // Country
        public DbSet<DateTimeDefaultTest> DateTimeDefaultTests { get; set; } // DateTimeDefaultTest
        public DbSet<DboProcDataFromFfrsAndDboReturnModel> DboProcDataFromFfrsAndDboReturnModels { get; set; } // DboProcDataFromFfrsAndDboReturnModel
        public DbSet<DboProcDataFromFfrsReturnModel> DboProcDataFromFfrsReturnModels { get; set; } // DboProcDataFromFfrsReturnModel
        public DbSet<DefaultCheckForNull> DefaultCheckForNulls { get; set; } // DefaultCheckForNull
        public DbSet<DsOpe> DsOpes { get; set; } // DSOpe
        public DbSet<DsOpeProcReturnModel> DsOpeProcReturnModels { get; set; } // DsOpeProcReturnModel
        public DbSet<EnumWithDefaultValue> EnumWithDefaultValues { get; set; } // EnumWithDefaultValue
        public DbSet<EventProcessor> EventProcessors { get; set; } // EventProcessor
        public DbSet<EventProcessorEventFilter> EventProcessorEventFilters { get; set; } // EventProcessorEventFilter
        public DbSet<FFRS_Cv> FFRS_Cvs { get; set; } // CV
        public DbSet<FfrsCvDataReturnModel> FfrsCvDataReturnModels { get; set; } // FFRS_CvDataReturnModel
        public DbSet<FfrsDataFromDboAndFfrsReturnModel> FfrsDataFromDboAndFfrsReturnModels { get; set; } // FFRS_DataFromDboAndFfrsReturnModel
        public DbSet<FfrsDataFromDboReturnModel> FfrsDataFromDboReturnModels { get; set; } // FFRS_DataFromDboReturnModel
        public DbSet<FinancialInstitutionOffice> FinancialInstitutionOffices { get; set; } // FinancialInstitutionOffice
        public DbSet<Footer> Footers { get; set; } // footer
        public DbSet<ForeignKeyIsNotEnforced> ForeignKeyIsNotEnforceds { get; set; } // ForeignKeyIsNotEnforced
        public DbSet<ForeignKeyIsNotEnforcedItem> ForeignKeyIsNotEnforcedItems { get; set; } // ForeignKeyIsNotEnforcedItem
        public DbSet<GetScreamAndShoutReturnModel> GetScreamAndShoutReturnModels { get; set; } // GetScreamAndShoutReturnModel
        public DbSet<HasPrincipalKeyTestChild> HasPrincipalKeyTestChilds { get; set; } // HasPrincipalKeyTestChild
        public DbSet<HasPrincipalKeyTestParent> HasPrincipalKeyTestParents { get; set; } // HasPrincipalKeyTestParent
        public DbSet<Header> Headers { get; set; } // header
        public DbSet<HierarchyTest> HierarchyTests { get; set; } // hierarchy_test
        public DbSet<Issue47_Role> Issue47_Roles { get; set; } // Role
        public DbSet<Issue47_User> Issue47_Users { get; set; } // Users
        public DbSet<Issue47_UserRole> Issue47_UserRoles { get; set; } // UserRoles
        public DbSet<Kate_ScreamAndShout> Kate_ScreamAndShouts { get; set; } // ScreamAndShout
        public DbSet<MultipleKey> MultipleKeys { get; set; } // MultipleKeys
        public DbSet<OneEightSix_Issue> OneEightSix_Issues { get; set; } // Issue
        public DbSet<OneEightSix_UploadedFile> OneEightSix_UploadedFiles { get; set; } // UploadedFile
        public DbSet<PeriodTestTable> PeriodTestTables { get; set; } // PeriodTestTable
        public DbSet<Person> People { get; set; } // Person
        public DbSet<PersonPost> PersonPosts { get; set; } // PersonPosts
        public DbSet<PkOrdinalTest> PkOrdinalTests { get; set; } // pk_ordinal_test
        public DbSet<PropertyTypesToAdd> PropertyTypesToAdds { get; set; } // PropertyTypesToAdd
        public DbSet<RebelGalaxyBroadside> RebelGalaxyBroadsides { get; set; } // RebelGalaxyBroadsides
        public DbSet<RebelGalaxyShip> RebelGalaxyShips { get; set; } // RebelGalaxyShips
        public DbSet<RebelGalaxyWeapon> RebelGalaxyWeapons { get; set; } // RebelGalaxyWeapons
        public DbSet<ScreamAndShout> ScreamAndShouts { get; set; } // ScreamAndShout
        public DbSet<SequenceTest> SequenceTests { get; set; } // SequenceTest
        public DbSet<SpatialTypesNoParamsReturnModel> SpatialTypesNoParamsReturnModels { get; set; } // SpatialTypesNoParamsReturnModel
        public DbSet<StockPrediction> StockPredictions { get; set; } // StockPrediction
        public DbSet<StpNoParamsTestReturnModel> StpNoParamsTestReturnModels { get; set; } // StpNoParamsTestReturnModel
        public DbSet<StpNullableParamsTestReturnModel> StpNullableParamsTestReturnModels { get; set; } // StpNullableParamsTestReturnModel
        public DbSet<StpTestReturnModel> StpTestReturnModels { get; set; } // StpTestReturnModel
        public DbSet<StpTestUnderscoreTestReturnModel> StpTestUnderscoreTestReturnModels { get; set; } // StpTestUnderscoreTestReturnModel
        public DbSet<TableA> TableAs { get; set; } // TableA
        public DbSet<TableB> TableBs { get; set; } // TableB
        public DbSet<TableWithDuplicateColumnName> TableWithDuplicateColumnNames { get; set; } // table with duplicate column names
        public DbSet<TableWithSpace> TableWithSpaces { get; set; } // table with space
        public DbSet<TableWithSpaceAndInColumn> TableWithSpaceAndInColumns { get; set; } // table with space and in columns
        public DbSet<TableWithSpaceInColumnOnly> TableWithSpaceInColumnOnlies { get; set; } // TableWithSpaceInColumnOnly
        public DbSet<TadeuszSobol> TadeuszSobols { get; set; } // TadeuszSobol
        public DbSet<Task1> Task1 { get; set; } // Task
        public DbSet<TblOrder> TblOrders { get; set; } // tblOrders
        public DbSet<TblOrderError> TblOrderErrors { get; set; } // tblOrderErrors
        public DbSet<TblOrderErrorsAb> TblOrderErrorsAbs { get; set; } // tblOrderErrorsAB_
        public DbSet<TblOrderLine> TblOrderLines { get; set; } // tblOrderLines
        public DbSet<Ticket> Tickets { get; set; } // Ticket
        public DbSet<Token> Tokens { get; set; } // Token
        public DbSet<User> Users { get; set; } // User
        public DbSet<User309> User309 { get; set; } // User309
        public DbSet<UserDocument> UserDocuments { get; set; } // User_Document

        public FakeFredDbContext()
        {
            _database = null;

            A = new FakeDbSet<A>("AId");
            Aarefs = new FakeDbSet<Aaref>("C1", "C2");
            AbOrderLinesAbs = new FakeDbSet<AbOrderLinesAb>("Id");
            AbOrdersAbs = new FakeDbSet<AbOrdersAb>("Id");
            Alpha_Harish3485 = new FakeDbSet<Alpha_Harish3485>("Id");
            Alpha_Workflows = new FakeDbSet<Alpha_Workflow>("Id");
            App_UserFacilityServiceRoles = new FakeDbSet<App_UserFacilityServiceRole>("UserId", "AppId", "FsrId");
            AppUsers = new FakeDbSet<AppUser>("Id");
            Attendees = new FakeDbSet<Attendee>("AttendeeId");
            BatchTests = new FakeDbSet<BatchTest>("Code");
            Beta_Harish3485 = new FakeDbSet<Beta_Harish3485>("Id");
            Beta_ToAlphas = new FakeDbSet<Beta_ToAlpha>("Id");
            Beta_Workflows = new FakeDbSet<Beta_Workflow>("Id");
            Bitfiddlerallcaps = new FakeDbSet<Bitfiddlerallcap>("Id");
            BitFiddlerCategoRies = new FakeDbSet<BitFiddlerCategoRy>("Id");
            BitFiddlerCurrenCies = new FakeDbSet<BitFiddlerCurrenCy>("Id");
            Blahs = new FakeDbSet<Blah>("BlahId");
            BlahBlahLinkReadonlies = new FakeDbSet<BlahBlahLinkReadonly>("BlahId", "BlahId2");
            BlahBlahLinkV2 = new FakeDbSet<BlahBlahLinkV2>("BlahId", "BlahId2");
            Blargs = new FakeDbSet<Blarg>("BlargId");
            BringTheActions = new FakeDbSet<BringTheAction>("C36");
            Burak1 = new FakeDbSet<Burak1>("Id");
            Burak2 = new FakeDbSet<Burak2>("Id");
            CalculatedColumnNotNulls = new FakeDbSet<CalculatedColumnNotNull>("Id");
            Cars = new FakeDbSet<Car>("Id");
            ClientCreationStates = new FakeDbSet<ClientCreationState>("Id");
            CmsFiles = new FakeDbSet<CmsFile>("FileId");
            CmsTags = new FakeDbSet<CmsTag>("TagId");
            CodeMeetingTopicDetails = new FakeDbSet<CodeMeetingTopicDetail>("Id");
            CodeObjects = new FakeDbSet<CodeObject>("CodeObjectNo");
            CodeParamMeetingTopicDetailSources = new FakeDbSet<CodeParamMeetingTopicDetailSource>("Id");
            Colours = new FakeDbSet<Colour>("Id");
            Companies = new FakeDbSet<Company>("CoId");
            CompanyGroups = new FakeDbSet<CompanyGroup>("CogId");
            Countries = new FakeDbSet<Country>("CountryId");
            DateTimeDefaultTests = new FakeDbSet<DateTimeDefaultTest>("Id");
            DboProcDataFromFfrsAndDboReturnModels = new FakeDbSet<DboProcDataFromFfrsAndDboReturnModel>("Id", "PrimaryColourId");
            DboProcDataFromFfrsReturnModels = new FakeDbSet<DboProcDataFromFfrsReturnModel>("BatchUid", "Cvid");
            DefaultCheckForNulls = new FakeDbSet<DefaultCheckForNull>("Id");
            DsOpes = new FakeDbSet<DsOpe>("Id");
            DsOpeProcReturnModels = new FakeDbSet<DsOpeProcReturnModel>("Id");
            EnumWithDefaultValues = new FakeDbSet<EnumWithDefaultValue>("Id");
            EventProcessors = new FakeDbSet<EventProcessor>("Id");
            EventProcessorEventFilters = new FakeDbSet<EventProcessorEventFilter>("Id");
            FFRS_Cvs = new FakeDbSet<FFRS_Cv>("BatchUid", "Cvid");
            FfrsCvDataReturnModels = new FakeDbSet<FfrsCvDataReturnModel>("BatchUid", "Cvid");
            FfrsDataFromDboAndFfrsReturnModels = new FakeDbSet<FfrsDataFromDboAndFfrsReturnModel>("Id", "PrimaryColourId");
            FfrsDataFromDboReturnModels = new FakeDbSet<FfrsDataFromDboReturnModel>("Id", "PrimaryColourId");
            FinancialInstitutionOffices = new FakeDbSet<FinancialInstitutionOffice>("FinancialInstitutionCode");
            Footers = new FakeDbSet<Footer>("Id");
            ForeignKeyIsNotEnforceds = new FakeDbSet<ForeignKeyIsNotEnforced>("Id");
            ForeignKeyIsNotEnforcedItems = new FakeDbSet<ForeignKeyIsNotEnforcedItem>("Id");
            GetScreamAndShoutReturnModels = new FakeDbSet<GetScreamAndShoutReturnModel>("Id");
            HasPrincipalKeyTestChilds = new FakeDbSet<HasPrincipalKeyTestChild>("Id");
            HasPrincipalKeyTestParents = new FakeDbSet<HasPrincipalKeyTestParent>("Id");
            Headers = new FakeDbSet<Header>("Id", "AnotherId");
            HierarchyTests = new FakeDbSet<HierarchyTest>("Id");
            Issue47_Roles = new FakeDbSet<Issue47_Role>("RoleId");
            Issue47_Users = new FakeDbSet<Issue47_User>("UserId");
            Issue47_UserRoles = new FakeDbSet<Issue47_UserRole>("UserRoleId");
            Kate_ScreamAndShouts = new FakeDbSet<Kate_ScreamAndShout>("KateId");
            MultipleKeys = new FakeDbSet<MultipleKey>("UserId", "FavouriteColourId", "BestHolidayTypeId");
            OneEightSix_Issues = new FakeDbSet<OneEightSix_Issue>("Id");
            OneEightSix_UploadedFiles = new FakeDbSet<OneEightSix_UploadedFile>("Id");
            PeriodTestTables = new FakeDbSet<PeriodTestTable>("Id");
            People = new FakeDbSet<Person>("Id");
            PersonPosts = new FakeDbSet<PersonPost>("Id");
            PkOrdinalTests = new FakeDbSet<PkOrdinalTest>("C3", "C1");
            PropertyTypesToAdds = new FakeDbSet<PropertyTypesToAdd>("Id");
            RebelGalaxyBroadsides = new FakeDbSet<RebelGalaxyBroadside>("Damage", "Cost");
            RebelGalaxyShips = new FakeDbSet<RebelGalaxyShip>("Broadsides", "Turrets", "Cost");
            RebelGalaxyWeapons = new FakeDbSet<RebelGalaxyWeapon>("Damage", "Cost");
            ScreamAndShouts = new FakeDbSet<ScreamAndShout>("Id");
            SequenceTests = new FakeDbSet<SequenceTest>("Id");
            SpatialTypesNoParamsReturnModels = new FakeDbSet<SpatialTypesNoParamsReturnModel>("Dollar", "SomeDate");
            StockPredictions = new FakeDbSet<StockPrediction>("Id");
            StpNoParamsTestReturnModels = new FakeDbSet<StpNoParamsTestReturnModel>("CodeObjectNo");
            StpNullableParamsTestReturnModels = new FakeDbSet<StpNullableParamsTestReturnModel>("CodeObjectNo");
            StpTestReturnModels = new FakeDbSet<StpTestReturnModel>("CodeObjectNo", "Type", "IsObject");
            StpTestUnderscoreTestReturnModels = new FakeDbSet<StpTestUnderscoreTestReturnModel>("CodeObjectNo");
            TableAs = new FakeDbSet<TableA>("TableAId");
            TableBs = new FakeDbSet<TableB>("TableBId", "TableAId");
            TableWithDuplicateColumnNames = new FakeDbSet<TableWithDuplicateColumnName>("Id");
            TableWithSpaces = new FakeDbSet<TableWithSpace>("Id");
            TableWithSpaceAndInColumns = new FakeDbSet<TableWithSpaceAndInColumn>("IdValue");
            TableWithSpaceInColumnOnlies = new FakeDbSet<TableWithSpaceInColumnOnly>("IdValue");
            TadeuszSobols = new FakeDbSet<TadeuszSobol>("Id");
            Task1 = new FakeDbSet<Task1>("TaskId");
            TblOrders = new FakeDbSet<TblOrder>("Id");
            TblOrderErrors = new FakeDbSet<TblOrderError>("Id");
            TblOrderErrorsAbs = new FakeDbSet<TblOrderErrorsAb>("Id");
            TblOrderLines = new FakeDbSet<TblOrderLine>("Id");
            Tickets = new FakeDbSet<Ticket>("Id");
            Tokens = new FakeDbSet<Token>("Id");
            Users = new FakeDbSet<User>("Id");
            User309 = new FakeDbSet<User309>("UserId");
            UserDocuments = new FakeDbSet<UserDocument>("Id");

        }

        public int SaveChangesCount { get; private set; }
        public virtual int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public virtual int SaveChanges(bool acceptAllChangesOnSuccess)
        {
            return SaveChanges();
        }

        public virtual Task<int> SaveChangesAsync(CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }
        public virtual Task<int> SaveChangesAsync(bool acceptAllChangesOnSuccess, CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return Task<int>.Factory.StartNew(x => 1, acceptAllChangesOnSuccess, cancellationToken);
        }

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        private DatabaseFacade _database;
        public DatabaseFacade Database { get { return _database; } }

        public DbSet<TEntity> Set<TEntity>() where TEntity : class
        {
            throw new NotImplementedException();
        }

        public override string ToString()
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry Add(object entity)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry<TEntity> Add<TEntity>(TEntity entity) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual Task AddRangeAsync(params object[] entities)
        {
            throw new NotImplementedException();
        }

        public virtual async Task AddRangeAsync(IEnumerable<object> entities, CancellationToken cancellationToken = default)
        {
            await Task.CompletedTask;
            throw new NotImplementedException();
        }

        public virtual async ValueTask<EntityEntry<TEntity>> AddAsync<TEntity>(TEntity entity, CancellationToken cancellationToken = default) where TEntity : class
        {
            await Task.CompletedTask;
            throw new NotImplementedException();
        }

        public virtual async ValueTask<EntityEntry> AddAsync(object entity, CancellationToken cancellationToken = default)
        {
            await Task.CompletedTask;
            throw new NotImplementedException();
        }

        public virtual void AddRange(IEnumerable<object> entities)
        {
            throw new NotImplementedException();
        }

        public virtual void AddRange(params object[] entities)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry Attach(object entity)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry<TEntity> Attach<TEntity>(TEntity entity) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual void AttachRange(IEnumerable<object> entities)
        {
            throw new NotImplementedException();
        }

        public virtual void AttachRange(params object[] entities)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry Entry(object entity)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual TEntity Find<TEntity>(params object[] keyValues) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual ValueTask<TEntity> FindAsync<TEntity>(object[] keyValues, CancellationToken cancellationToken) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual ValueTask<TEntity> FindAsync<TEntity>(params object[] keyValues) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual ValueTask<object> FindAsync(Type entityType, object[] keyValues, CancellationToken cancellationToken)
        {
            throw new NotImplementedException();
        }

        public virtual ValueTask<object> FindAsync(Type entityType, params object[] keyValues)
        {
            throw new NotImplementedException();
        }

        public virtual object Find(Type entityType, params object[] keyValues)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry Remove(object entity)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry<TEntity> Remove<TEntity>(TEntity entity) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual void RemoveRange(IEnumerable<object> entities)
        {
            throw new NotImplementedException();
        }

        public virtual void RemoveRange(params object[] entities)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry Update(object entity)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry<TEntity> Update<TEntity>(TEntity entity) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual void UpdateRange(IEnumerable<object> entities)
        {
            throw new NotImplementedException();
        }

        public virtual void UpdateRange(params object[] entities)
        {
            throw new NotImplementedException();
        }

        public virtual IQueryable<TResult> FromExpression<TResult> (Expression<Func<IQueryable<TResult>>> expression)
        {
            throw new NotImplementedException();
        }

    }

    #endregion

    #region Fake DbSet

    // ************************************************************************
    // Fake DbSet
    // Implementing Find:
    //      The Find method is difficult to implement in a generic fashion. If
    //      you need to test code that makes use of the Find method it is
    //      easiest to create a test DbSet for each of the entity types that
    //      need to support find. You can then write logic to find that
    //      particular type of entity, as shown below:
    //      public class FakeBlogDbSet : FakeDbSet<Blog>
    //      {
    //          public override Blog Find(params object[] keyValues)
    //          {
    //              var id = (int) keyValues.Single();
    //              return this.SingleOrDefault(b => b.BlogId == id);
    //          }
    //      }
    //      Read more about it here: https://msdn.microsoft.com/en-us/data/dn314431.aspx
    public class FakeDbSet<TEntity> : DbSet<TEntity>, IQueryable<TEntity>, IAsyncEnumerable<TEntity>, IListSource where TEntity : class
    {
        private readonly PropertyInfo[] _primaryKeys;
        private readonly ObservableCollection<TEntity> _data;
        private readonly IQueryable _query;

        public FakeDbSet()
        {
            _primaryKeys = null;
            _data        = new ObservableCollection<TEntity>();
            _query       = _data.AsQueryable();
        }

        public FakeDbSet(params string[] primaryKeys)
        {
            _primaryKeys = typeof(TEntity).GetProperties().Where(x => primaryKeys.Contains(x.Name)).ToArray();
            _data        = new ObservableCollection<TEntity>();
            _query       = _data.AsQueryable();
        }

        public override TEntity Find(params object[] keyValues)
        {
            if (_primaryKeys == null)
                throw new ArgumentException("No primary keys defined");
            if (keyValues.Length != _primaryKeys.Length)
                throw new ArgumentException("Incorrect number of keys passed to Find method");

            var keyQuery = this.AsQueryable();
            keyQuery = keyValues
                .Select((t, i) => i)
                .Aggregate(keyQuery,
                    (current, x) =>
                        current.Where(entity => _primaryKeys[x].GetValue(entity, null).Equals(keyValues[x])));

            return keyQuery.SingleOrDefault();
        }

        public override ValueTask<TEntity> FindAsync(object[] keyValues, CancellationToken cancellationToken)
        {
            return new ValueTask<TEntity>(Task<TEntity>.Factory.StartNew(() => Find(keyValues), cancellationToken));
        }

        public override ValueTask<TEntity> FindAsync(params object[] keyValues)
        {
            return new ValueTask<TEntity>(Task<TEntity>.Factory.StartNew(() => Find(keyValues)));
        }

        IAsyncEnumerator<TEntity> IAsyncEnumerable<TEntity>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAsyncEnumerator(cancellationToken);
        }

        public override EntityEntry<TEntity> Add(TEntity entity)
        {
            _data.Add(entity);
            return null;
        }

        public override void AddRange(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            foreach (var entity in entities.ToList())
                _data.Add(entity);
        }

        public override void AddRange(IEnumerable<TEntity> entities)
        {
            AddRange(entities.ToArray());
        }

        public override Task AddRangeAsync(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            return Task.Factory.StartNew(() => AddRange(entities));
        }

        public override void AttachRange(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            AddRange(entities);
        }

        public override void RemoveRange(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            foreach (var entity in entities.ToList())
                _data.Remove(entity);
        }

        public override void RemoveRange(IEnumerable<TEntity> entities)
        {
            RemoveRange(entities.ToArray());
        }

        public override void UpdateRange(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            RemoveRange(entities);
            AddRange(entities);
        }

        public IList GetList()
        {
            return _data;
        }

        IList IListSource.GetList()
        {
            return _data;
        }

        Type IQueryable.ElementType
        {
            get { return _query.ElementType; }
        }

        Expression IQueryable.Expression
        {
            get { return _query.Expression; }
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<TEntity>(_data); }
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        IEnumerator<TEntity> IEnumerable<TEntity>.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        IAsyncEnumerator<TEntity> GetAsyncEnumerator(CancellationToken cancellationToken = default(CancellationToken))
        {
            return new FakeDbAsyncEnumerator<TEntity>(this.AsEnumerable().GetEnumerator());
        }
    }

    public class FakeDbAsyncQueryProvider<TEntity> : FakeQueryProvider<TEntity>, IAsyncEnumerable<TEntity>, IAsyncQueryProvider
    {
        public FakeDbAsyncQueryProvider(Expression expression) : base(expression)
        {
        }

        public FakeDbAsyncQueryProvider(IEnumerable<TEntity> enumerable) : base(enumerable)
        {
        }

        public TResult ExecuteAsync<TResult>(Expression expression, CancellationToken cancellationToken)
        {
            var expectedResultType = typeof(TResult).GetGenericArguments()[0];
            var executionResult = typeof(IQueryProvider)
                .GetMethods()
                .First(method => method.Name == nameof(IQueryProvider.Execute) && method.IsGenericMethod)
                .MakeGenericMethod(expectedResultType)
                .Invoke(this, new object[] { expression });

            return (TResult) typeof(Task).GetMethod(nameof(Task.FromResult))
                ?.MakeGenericMethod(expectedResultType)
                .Invoke(null, new[] { executionResult });
        }

        public IAsyncEnumerator<TEntity> GetAsyncEnumerator(CancellationToken cancellationToken = default)
        {
            return new FakeDbAsyncEnumerator<TEntity>(this.AsEnumerable().GetEnumerator());
        }
    }

    public class FakeDbAsyncEnumerable<T> : EnumerableQuery<T>, IAsyncEnumerable<T>, IQueryable<T>
    {
        public FakeDbAsyncEnumerable(IEnumerable<T> enumerable)
            : base(enumerable)
        {
        }

        public FakeDbAsyncEnumerable(Expression expression)
            : base(expression)
        {
        }

        public IAsyncEnumerator<T> GetAsyncEnumerator(CancellationToken cancellationToken = new CancellationToken())
        {
            return new FakeDbAsyncEnumerator<T>(this.AsEnumerable().GetEnumerator());
        }

        IAsyncEnumerator<T> IAsyncEnumerable<T>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAsyncEnumerator(cancellationToken);
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return this.AsEnumerable().GetEnumerator();
        }
    }

    public class FakeDbAsyncEnumerator<T> : IAsyncEnumerator<T>
    {
        private readonly IEnumerator<T> _inner;

        public FakeDbAsyncEnumerator(IEnumerator<T> inner)
        {
            _inner = inner;
        }

        public T Current
        {
            get { return _inner.Current; }
        }

        public ValueTask<bool> MoveNextAsync()
        {
            return new ValueTask<bool>(_inner.MoveNext());
        }

        public ValueTask DisposeAsync()
        {
            _inner.Dispose();
            return new ValueTask(Task.CompletedTask);
        }
    }

    public abstract class FakeQueryProvider<T> : IOrderedQueryable<T>, IQueryProvider
    {
        private IEnumerable<T> _enumerable;

        protected FakeQueryProvider(Expression expression)
        {
            Expression = expression;
        }

        protected FakeQueryProvider(IEnumerable<T> enumerable)
        {
            _enumerable = enumerable;
            Expression = enumerable.AsQueryable().Expression;
        }

        public IQueryable CreateQuery(Expression expression)
        {
            if (expression is MethodCallExpression m)
            {
                var resultType = m.Method.ReturnType; // it should be IQueryable<T>
                var tElement = resultType.GetGenericArguments().First();
                return (IQueryable) CreateInstance(tElement, expression);
            }

            return CreateQuery<T>(expression);
        }

        public IQueryable<TEntity> CreateQuery<TEntity>(Expression expression)
        {
            return (IQueryable<TEntity>) CreateInstance(typeof(TEntity), expression);
        }

        private object CreateInstance(Type tElement, Expression expression)
        {
            var queryType = GetType().GetGenericTypeDefinition().MakeGenericType(tElement);
            return Activator.CreateInstance(queryType, expression);
        }

        public object Execute(Expression expression)
        {
            return CompileExpressionItem<object>(expression);
        }

        public TResult Execute<TResult>(Expression expression)
        {
            return CompileExpressionItem<TResult>(expression);
        }

        IEnumerator<T> IEnumerable<T>.GetEnumerator()
        {
            if (_enumerable == null) _enumerable = CompileExpressionItem<IEnumerable<T>>(Expression);
            return _enumerable.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            if (_enumerable == null) _enumerable = CompileExpressionItem<IEnumerable<T>>(Expression);
            return _enumerable.GetEnumerator();
        }

        public Type ElementType => typeof(T);

        public Expression Expression { get; }

        public IQueryProvider Provider => this;

        private static TResult CompileExpressionItem<TResult>(Expression expression)
        {
            var visitor = new FakeExpressionVisitor();
            var body = visitor.Visit(expression);
            var f = Expression.Lambda<Func<TResult>>(body ?? throw new InvalidOperationException(string.Format("{0} is null", nameof(body))), (IEnumerable<ParameterExpression>) null);
            return f.Compile()();
        }
    }

    public class FakeExpressionVisitor : ExpressionVisitor
    {
    }

    #endregion

    #region POCO classes

    // A
    public class A
    {
        public int AId { get; set; } // AId (Primary key)
        public int C1 { get; set; } // C1
        public int C2 { get; set; } // C2

        // Foreign keys

        /// <summary>
        /// Parent Aaref pointed by [A].([C1], [C2]) (FK_A_A)
        /// </summary>
        public virtual Aaref Aaref { get; set; } // FK_A_A
    }

    // AAREF
    public class Aaref
    {
        public int C1 { get; set; } // C1 (Primary key)
        public int C2 { get; set; } // C2 (Primary key)
        public DateTime CreatedUtc { get; set; } // CreatedUTC

        // Reverse navigation

        /// <summary>
        /// Child A where [A].([C1], [C2]) point to this entity (FK_A_A)
        /// </summary>
        public virtual ICollection<A> A { get; set; } // A.FK_A_A

        public Aaref()
        {
            A = new List<A>();
        }
    }

    // AB_OrderLinesAB_
    public class AbOrderLinesAb
    {
        public int Id { get; set; } // ID (Primary key)
        public int OrderId { get; set; } // OrderID
        public string Sku { get; set; } // sku (length: 15)

        // Foreign keys

        /// <summary>
        /// Parent AbOrdersAb pointed by [AB_OrderLinesAB_].([OrderId]) (AB_OrderLinesAB_FK)
        /// </summary>
        public virtual AbOrdersAb AbOrdersAb { get; set; } // AB_OrderLinesAB_FK
    }

    // AB_OrdersAB_
    public class AbOrdersAb
    {
        public int Id { get; set; } // ID (Primary key)
        public DateTime Added { get; set; } // added

        // Reverse navigation

        /// <summary>
        /// Child AbOrderLinesAbs where [AB_OrderLinesAB_].[OrderID] point to this entity (AB_OrderLinesAB_FK)
        /// </summary>
        public virtual ICollection<AbOrderLinesAb> AbOrderLinesAbs { get; set; } // AB_OrderLinesAB_.AB_OrderLinesAB_FK

        public AbOrdersAb()
        {
            AbOrderLinesAbs = new List<AbOrderLinesAb>();
        }
    }

    // Harish3485
    public class Alpha_Harish3485
    {
        public int Id { get; set; } // id (Primary key)
        public int HarishId { get; set; } // harish_id

        // Foreign keys

        /// <summary>
        /// Parent Kate_ScreamAndShout pointed by [Harish3485].([HarishId]) (FK_Harish)
        /// </summary>
        public virtual Kate_ScreamAndShout Kate_ScreamAndShout { get; set; } // FK_Harish
    }

    // workflow
    public class Alpha_Workflow
    {
        public int Id { get; set; } // Id (Primary key)
        public string Description { get; set; } // Description (length: 10)

        // Reverse navigation

        /// <summary>
        /// Child Beta_ToAlphas where [ToAlpha].[AlphaId] point to this entity (BetaToAlpha_AlphaWorkflow)
        /// </summary>
        public virtual ICollection<Beta_ToAlpha> Beta_ToAlphas { get; set; } // ToAlpha.BetaToAlpha_AlphaWorkflow

        public Alpha_Workflow()
        {
            Beta_ToAlphas = new List<Beta_ToAlpha>();
        }
    }

    // UserFacilityServiceRole
    public class App_UserFacilityServiceRole
    {
        public int UserId { get; set; } // userId (Primary key)
        public int AppId { get; set; } // appId (Primary key)
        public int FsrId { get; set; } // fsrId (Primary key)
    }

    // AppUser
    public class AppUser
    {
        public long Id { get; set; } // Id (Primary key)
        public string Name { get; set; } // Name (length: 50)

        // Reverse navigation

        /// <summary>
        /// Child Tickets where [Ticket].[CreatedById] point to this entity (FK_Ticket_AppUser)
        /// </summary>
        public virtual ICollection<Ticket> Tickets_CreatedById { get; set; } // Ticket.FK_Ticket_AppUser

        /// <summary>
        /// Child Tickets where [Ticket].[ModifiedById] point to this entity (FK_Ticket_AppUser1)
        /// </summary>
        public virtual ICollection<Ticket> Tickets_ModifiedById { get; set; } // Ticket.FK_Ticket_AppUser1

        public AppUser()
        {
            Tickets_CreatedById = new List<Ticket>();
            Tickets_ModifiedById = new List<Ticket>();
        }
    }

    // Attendee
    public class Attendee
    {
        public long AttendeeId { get; set; } // AttendeeID (Primary key)
        public string Lastname { get; set; } // Lastname (length: 50)
        public string Firstname { get; set; } // Firstname (length: 50)
        public int? PhoneCountryId { get; set; } // PhoneCountryID

        // Foreign keys

        /// <summary>
        /// Parent Country pointed by [Attendee].([PhoneCountryId]) (FK_Attendee_PhoneCountry)
        /// </summary>
        public virtual Country Country { get; set; } // FK_Attendee_PhoneCountry
    }

    // BatchTest
    public class BatchTest
    {
        public string Code { get; set; } // code (Primary key) (length: 8)
    }

    // Harish3485
    public class Beta_Harish3485
    {
        public int Id { get; set; } // id (Primary key)
        public int AnotherId { get; set; } // another_id

        // Foreign keys

        /// <summary>
        /// Parent PropertyTypesToAdd pointed by [Harish3485].([AnotherId]) (FK_Harish)
        /// </summary>
        public virtual PropertyTypesToAdd PropertyTypesToAdd { get; set; } // FK_Harish
    }

    // ToAlpha
    public class Beta_ToAlpha
    {
        public int Id { get; set; } // Id (Primary key)
        public int AlphaId { get; set; } // AlphaId

        // Foreign keys

        /// <summary>
        /// Parent Alpha_Workflow pointed by [ToAlpha].([AlphaId]) (BetaToAlpha_AlphaWorkflow)
        /// </summary>
        public virtual Alpha_Workflow Alpha_Workflow { get; set; } // BetaToAlpha_AlphaWorkflow
    }

    // workflow
    public class Beta_Workflow
    {
        public int Id { get; set; } // Id (Primary key)
        public string Description { get; set; } // Description (length: 10)
    }

    // BITFIDDLERALLCAPS
    public class Bitfiddlerallcap
    {
        public int Id { get; set; } // Id (Primary key)
    }

    // BitFiddlerCATEGORIES
    public class BitFiddlerCategoRy
    {
        public int Id { get; set; } // Id (Primary key)
    }

    // BitFiddlerCURRENCIES
    public class BitFiddlerCurrenCy
    {
        public int Id { get; set; } // Id (Primary key)
    }

    // Blah
    public class Blah
    {
        public int BlahId { get; set; } // BlahID (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child Blahs (Many-to-Many) mapped by table [BlahBlahLink]
        /// </summary>
        public virtual ICollection<Blah> Blahs_BlahId { get; set; } // Many to many mapping

        /// <summary>
        /// Child Blahs (Many-to-Many) mapped by table [BlahBlahLink]
        /// </summary>
        public virtual ICollection<Blah> Blahs_BlahId2 { get; set; } // Many to many mapping

        /// <summary>
        /// Child BlahBlahLinkReadonlies where [BlahBlahLink_readonly].[BlahID] point to this entity (FK_BlahBlahLink_Blah_ro)
        /// </summary>
        public virtual ICollection<BlahBlahLinkReadonly> BlahBlahLinkReadonlies_BlahId { get; set; } // BlahBlahLink_readonly.FK_BlahBlahLink_Blah_ro

        /// <summary>
        /// Child BlahBlahLinkReadonlies where [BlahBlahLink_readonly].[BlahID2] point to this entity (FK_BlahBlahLink_Blah_ro2)
        /// </summary>
        public virtual ICollection<BlahBlahLinkReadonly> BlahBlahLinkReadonlies_BlahId2 { get; set; } // BlahBlahLink_readonly.FK_BlahBlahLink_Blah_ro2

        /// <summary>
        /// Child BlahBlahLinkV2 where [BlahBlahLink_v2].[BlahID] point to this entity (FK_BlahBlahLinkv2_Blah_ro)
        /// </summary>
        public virtual ICollection<BlahBlahLinkV2> BlahBlahLinkV2_BlahId { get; set; } // BlahBlahLink_v2.FK_BlahBlahLinkv2_Blah_ro

        /// <summary>
        /// Child BlahBlahLinkV2 where [BlahBlahLink_v2].[BlahID2] point to this entity (FK_BlahBlahLinkv2_Blah_ro2)
        /// </summary>
        public virtual ICollection<BlahBlahLinkV2> BlahBlahLinkV2_BlahId2 { get; set; } // BlahBlahLink_v2.FK_BlahBlahLinkv2_Blah_ro2

        /// <summary>
        /// Child Blargs (Many-to-Many) mapped by table [BlahBlargLink]
        /// </summary>
        public virtual ICollection<Blarg> Blargs { get; set; } // Many to many mapping

        public Blah()
        {
            BlahBlahLinkReadonlies_BlahId = new List<BlahBlahLinkReadonly>();
            BlahBlahLinkReadonlies_BlahId2 = new List<BlahBlahLinkReadonly>();
            BlahBlahLinkV2_BlahId = new List<BlahBlahLinkV2>();
            BlahBlahLinkV2_BlahId2 = new List<BlahBlahLinkV2>();
            Blahs_BlahId = new List<Blah>();
            Blahs_BlahId2 = new List<Blah>();
            Blargs = new List<Blarg>();
        }
    }

    // BlahBlahLink_readonly
    public class BlahBlahLinkReadonly
    {
        public int BlahId { get; set; } // BlahID (Primary key)
        public int BlahId2 { get; set; } // BlahID2 (Primary key)
        public byte[] RowVersion { get; set; } // RowVersion
        public int Id { get; set; } // id
        public int? Id2 { get; set; } // id2

        // Foreign keys

        /// <summary>
        /// Parent Blah pointed by [BlahBlahLink_readonly].([BlahId]) (FK_BlahBlahLink_Blah_ro)
        /// </summary>
        public virtual Blah Blah_BlahId { get; set; } // FK_BlahBlahLink_Blah_ro

        /// <summary>
        /// Parent Blah pointed by [BlahBlahLink_readonly].([BlahId2]) (FK_BlahBlahLink_Blah_ro2)
        /// </summary>
        public virtual Blah Blah_BlahId2 { get; set; } // FK_BlahBlahLink_Blah_ro2
    }

    // BlahBlahLink_v2
    public class BlahBlahLinkV2
    {
        public int BlahId { get; set; } // BlahID (Primary key)
        public int BlahId2 { get; set; } // BlahID2 (Primary key)
        public int? Dummy1 { get; set; } // dummy1
        public int Dummy2 { get; set; } // dummy2
        public int Hello { get; set; } // hello

        // Foreign keys

        /// <summary>
        /// Parent Blah pointed by [BlahBlahLink_v2].([BlahId]) (FK_BlahBlahLinkv2_Blah_ro)
        /// </summary>
        public virtual Blah Blah_BlahId { get; set; } // FK_BlahBlahLinkv2_Blah_ro

        /// <summary>
        /// Parent Blah pointed by [BlahBlahLink_v2].([BlahId2]) (FK_BlahBlahLinkv2_Blah_ro2)
        /// </summary>
        public virtual Blah Blah_BlahId2 { get; set; } // FK_BlahBlahLinkv2_Blah_ro2
    }

    // Blarg
    public class Blarg
    {
        public int BlargId { get; set; } // BlargID (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child Blahs (Many-to-Many) mapped by table [BlahBlargLink]
        /// </summary>
        public virtual ICollection<Blah> Blahs { get; set; } // Many to many mapping

        public Blarg()
        {
            Blahs = new List<Blah>();
        }
    }

    // BringTheAction
    public class BringTheAction
    {
        public int C36 { get; set; } // $ (Primary key)
        public int? C37 { get; set; } // %
        public int? C163 { get; set; } // £
        public int? C38Fred36 { get; set; } // &fred$
        public int? Abc4792 { get; set; } // abc/\
        public int? Joe46Bloggs { get; set; } // joe.bloggs
        public int? SimonHughes { get; set; } // simon-hughes
        public string Description { get; set; } // description (length: 20)
        public DateTime SomeDate { get; set; } // someDate
        public string Obs { get; set; } // Obs (length: 50)
        public string Obs1 { get; set; } // Obs1 (length: 50)
        public string Obs2 { get; set; } // Obs2 (length: 50)
        public string Obs3 { get; set; } // Obs3 (length: 50)
        public int? @Static { get; set; } // static
        public int? @Readonly { get; set; } // readonly
        public int? C123Hi { get; set; } // 123Hi
        public float? Areal { get; set; } // areal
        public double? Afloat { get; set; } // afloat
        public float? Afloat8 { get; set; } // afloat8
        public float? Afloat20 { get; set; } // afloat20
        public float? Afloat24 { get; set; } // afloat24
        public double? Afloat53 { get; set; } // afloat53
        public decimal? Adecimal { get; set; } // adecimal
        public decimal? Adecimal194 { get; set; } // adecimal_19_4
        public decimal? Adecimal103 { get; set; } // adecimal_10_3
        public decimal? Anumeric { get; set; } // anumeric
        public decimal? Anumeric52 { get; set; } // anumeric_5_2
        public decimal? Anumeric113 { get; set; } // anumeric_11_3
        public decimal? Amoney { get; set; } // amoney
        public decimal? Asmallmoney { get; set; } // asmallmoney
        public int? Brandon { get; set; } // brandon
    }

    // Burak1
    public class Burak1
    {
        public long Id { get; set; } // id (Primary key)
        public long IdT { get; set; } // id_t
        public long Num { get; set; } // num

        // Foreign keys

        /// <summary>
        /// Parent Burak2 pointed by [Burak1].([Id]) (FK_Burak_Test2)
        /// </summary>
        public virtual Burak2 Burak2_Id { get; set; } // FK_Burak_Test2

        /// <summary>
        /// Parent Burak2 pointed by [Burak1].([IdT], [Num]) (FK_Burak_Test1)
        /// </summary>
        public virtual Burak2 Burak2_IdT { get; set; } // FK_Burak_Test1
    }

    // Burak2
    public class Burak2
    {
        public long Id { get; set; } // id (Primary key)
        public long Num { get; set; } // num

        // Reverse navigation

        /// <summary>
        /// Parent (One-to-One) Burak2 pointed by [Burak1].[id] (FK_Burak_Test2)
        /// </summary>
        public virtual Burak1 Burak1_Id { get; set; } // Burak1.FK_Burak_Test2

        /// <summary>
        /// Parent (One-to-One) Burak2 pointed by [Burak1].([id_t], [num]) (FK_Burak_Test1)
        /// </summary>
        public virtual Burak1 Burak1_IdT { get; set; } // Burak1.FK_Burak_Test1
    }

    // CalculatedColumnNotNull
    public class CalculatedColumnNotNull
    {
        public int Id { get; set; } // ID (Primary key)
        public byte Type { get; set; } // Type
        public bool IsCalendar { get; set; } // IsCalendar
        public bool IsUtilization { get; set; } // IsUtilization
    }

    // Car
    public class Car
    {
        public int Id { get; set; } // Id (Primary key)
        public int PrimaryColourId { get; set; } // PrimaryColourId
        public string CarMake { get; set; } // CarMake (length: 255)
        public int? ComputedColumn { get; set; } // computed_column
        public int ComputedColumnPersisted { get; set; } // computed_column_persisted

        // Reverse navigation

        /// <summary>
        /// Child Colours (Many-to-Many) mapped by table [CarToColour]
        /// </summary>
        public virtual ICollection<Colour> Colours { get; set; } // Many to many mapping

        // Foreign keys

        /// <summary>
        /// Parent Colour pointed by [Car].([PrimaryColourId]) (CarPrimaryColourFK)
        /// </summary>
        public virtual Colour Colour { get; set; } // CarPrimaryColourFK

        public Car()
        {
            Colours = new List<Colour>();
        }
    }

    // ClientCreationState
    public class ClientCreationState
    {
        public Guid Id { get; set; } // id (Primary key)
        public bool WebhookSetup { get; set; } // WebhookSetup
        public bool AuthSetup { get; set; } // AuthSetup
        public bool AssignedCarrier { get; set; } // AssignedCarrier
    }

    // CMS_File
    public class CmsFile
    {
        public int FileId { get; set; } // FileId (Primary key)
        public string FileName { get; set; } // FileName (length: 100)
        public string FileDescription { get; set; } // FileDescription (length: 500)
        public string FileIdentifier { get; set; } // FileIdentifier (length: 100)
        public DateTime? ValidStartDate { get; set; } // ValidStartDate
        public DateTime? ValidEndDate { get; set; } // ValidEndDate
        public bool IsActive { get; set; } // IsActive

        // Reverse navigation

        /// <summary>
        /// Child CmsTags (Many-to-Many) mapped by table [CMS_FileTag]
        /// </summary>
        public virtual ICollection<CmsTag> CmsTags { get; set; } // Many to many mapping

        public CmsFile()
        {
            CmsTags = new List<CmsTag>();
        }
    }

    // CMS_Tag
    public class CmsTag
    {
        public int TagId { get; set; } // TagId (Primary key)
        public string TagName { get; set; } // TagName (length: 100)

        // Reverse navigation

        /// <summary>
        /// Child CmsFiles (Many-to-Many) mapped by table [CMS_FileTag]
        /// </summary>
        public virtual ICollection<CmsFile> CmsFiles { get; set; } // Many to many mapping

        public CmsTag()
        {
            CmsFiles = new List<CmsFile>();
        }
    }

    // CODE_MeetingTopicDetails
    public class CodeMeetingTopicDetail
    {
        public int Id { get; set; } // id (Primary key)
        public int IdReuniao { get; set; } // id_reuniao
        public int? OrdTrab { get; set; } // ord_trab
        public string Assunto { get; set; } // assunto (length: 250)
        public string Desenvolvimento { get; set; } // desenvolvimento
        public string Origem { get; set; } // origem (length: 5)
        public int? IdOrigem { get; set; } // id_origem
        public int? Estado { get; set; } // Estado
        public int CompanyId { get; set; } // CompanyID
        public DateTime DateCreated { get; set; } // DateCreated
        public DateTime? DateChanged { get; set; } // DateChanged

        // Foreign keys

        /// <summary>
        /// Parent CodeParamMeetingTopicDetailSource pointed by [CODE_MeetingTopicDetails].([Origem]) (FK_CODE_MeetingTopicDetails_CODE_PARAM_MeetingTopicDetailSource)
        /// </summary>
        public virtual CodeParamMeetingTopicDetailSource CodeParamMeetingTopicDetailSource { get; set; } // FK_CODE_MeetingTopicDetails_CODE_PARAM_MeetingTopicDetailSource
    }

    // CodeObject
    public class CodeObject
    {
        public int CodeObjectNo { get; set; } // codeObjectNo (Primary key)
        public int? ApplicationNo { get; set; } // applicationNo
        public int Type { get; set; } // type
        public string EName { get; set; } // eName (length: 250)
        public string AName { get; set; } // aName (length: 250)
        public string Description { get; set; } // description (length: 250)
        public string CodeName { get; set; } // codeName (length: 250)
        public string Note { get; set; } // note (length: 250)
        public bool IsObject { get; set; } // isObject
        public byte[] VersionNumber { get; set; } // versionNumber
    }

    // CODE_PARAM_MeetingTopicDetailSource
    public class CodeParamMeetingTopicDetailSource
    {
        public int Id { get; set; } // ID (Primary key)
        public string Code { get; set; } // Code (length: 5)
        public string Label { get; set; } // Label (length: 50)
        public string LabelEng { get; set; } // LabelENG (length: 50)
        public string LabelEsp { get; set; } // LabelESP (length: 50)
        public string LabelFra { get; set; } // LabelFRA (length: 50)
        public DateTime DateCreated { get; set; } // DateCreated
        public DateTime? DateChanged { get; set; } // DateChanged

        // Reverse navigation

        /// <summary>
        /// Child CodeMeetingTopicDetails where [CODE_MeetingTopicDetails].[origem] point to this entity (FK_CODE_MeetingTopicDetails_CODE_PARAM_MeetingTopicDetailSource)
        /// </summary>
        public virtual ICollection<CodeMeetingTopicDetail> CodeMeetingTopicDetails { get; set; } // CODE_MeetingTopicDetails.FK_CODE_MeetingTopicDetails_CODE_PARAM_MeetingTopicDetailSource

        public CodeParamMeetingTopicDetailSource()
        {
            CodeMeetingTopicDetails = new List<CodeMeetingTopicDetail>();
        }
    }

    // Colour
    public class Colour
    {
        public int Id { get; set; } // Id (Primary key)
        public string Name { get; set; } // Name (length: 255)

        // Reverse navigation

        /// <summary>
        /// Child Cars (Many-to-Many) mapped by table [CarToColour]
        /// </summary>
        public virtual ICollection<Car> Cars_CarId { get; set; } // Many to many mapping

        /// <summary>
        /// Child Cars where [Car].[PrimaryColourId] point to this entity (CarPrimaryColourFK)
        /// </summary>
        public virtual ICollection<Car> Cars_PrimaryColourId { get; set; } // Car.CarPrimaryColourFK

        public Colour()
        {
            Cars_PrimaryColourId = new List<Car>();
            Cars_CarId = new List<Car>();
        }
    }

    // Company
    public class Company
    {
        public int CoId { get; set; } // coID (Primary key)
        public int? CocogId { get; set; } // cocogID
        public int? CocuId { get; set; } // cocuID
        public string CoName { get; set; } // coName (length: 255)
        public string CoShortName { get; set; } // coShortName (length: 50)
        public string CoHtmlName { get; set; } // coHtmlName (length: 1000)
        public string CoEmployerNo { get; set; } // coEmployerNo (length: 50)
        public DateTime? CoValidFrom { get; set; } // coValidFrom
        public DateTime? CoValidTo { get; set; } // coValidTo
        public string CoVatIdNo { get; set; } // coVatIdNo (length: 50)
        public string CoUrl { get; set; } // coURL (length: 255)
        public bool CoActive { get; set; } // coActive

        // Foreign keys

        /// <summary>
        /// Parent CompanyGroup pointed by [Company].([CocogId]) (FK_Company_CompanyGroup)
        /// </summary>
        public virtual CompanyGroup CompanyGroup { get; set; } // FK_Company_CompanyGroup
    }

    // CompanyGroup
    public class CompanyGroup
    {
        public int CogId { get; set; } // cogID (Primary key)
        public string CogCompanyGroupName { get; set; } // cogCompanyGroupName (length: 50)
        public DateTime? CogValidFrom { get; set; } // cogValidFrom
        public DateTime? CogValidTo { get; set; } // cogValidTo

        // Reverse navigation

        /// <summary>
        /// Child Companies where [Company].[cocogID] point to this entity (FK_Company_CompanyGroup)
        /// </summary>
        public virtual ICollection<Company> Companies { get; set; } // Company.FK_Company_CompanyGroup

        public CompanyGroup()
        {
            Companies = new List<Company>();
        }
    }

    // Country
    public class Country
    {
        public int CountryId { get; set; } // CountryID (Primary key)
        public string Code { get; set; } // Code (length: 12)

        // Reverse navigation

        /// <summary>
        /// Child Attendees where [Attendee].[PhoneCountryID] point to this entity (FK_Attendee_PhoneCountry)
        /// </summary>
        public virtual ICollection<Attendee> Attendees { get; set; } // Attendee.FK_Attendee_PhoneCountry

        /// <summary>
        /// Child User309 where [User309].[PhoneCountryID] point to this entity (FK_User309_PhoneCountry)
        /// </summary>
        public virtual ICollection<User309> User309 { get; set; } // User309.FK_User309_PhoneCountry

        public Country()
        {
            Attendees = new List<Attendee>();
            User309 = new List<User309>();
        }
    }

    // DateTimeDefaultTest
    public class DateTimeDefaultTest
    {
        public int Id { get; set; } // Id (Primary key)
        public DateTimeOffset? CreatedDate { get; set; } // CreatedDate
    }

    // DboProcDataFromFfrsAndDboReturnModel
    public class DboProcDataFromFfrsAndDboReturnModel
    {
        public int Id { get; set; } // Id (Primary key)
        public int PrimaryColourId { get; set; } // PrimaryColourId (Primary key)
        public string CarMake { get; set; } // CarMake
        public string CvName { get; set; } // CVName
    }

    // DboProcDataFromFfrsReturnModel
    public class DboProcDataFromFfrsReturnModel
    {
        public Guid BatchUid { get; set; } // BatchUID (Primary key)
        public int Cvid { get; set; } // CVID (Primary key)
        public string CvName { get; set; } // CVName
    }

    // DefaultCheckForNull
    public class DefaultCheckForNull
    {
        public int Id { get; set; } // Id (Primary key)
        public string DescUppercase { get; set; } // DescUppercase (length: 5)
        public string DescLowercase { get; set; } // DescLowercase (length: 5)
        public string DescMixedCase { get; set; } // DescMixedCase (length: 5)
        public string DescBrackets { get; set; } // DescBrackets (length: 5)
        public string X1 { get; set; } // X1 (length: 255)
    }

    // DSOpe
    public class DsOpe
    {
        public int Id { get; set; } // ID (Primary key)
        public decimal DecimalDefault { get; set; } // decimal_default
        public Guid MyGuid { get; set; } // MyGuid
        public string @Default { get; set; } // default (length: 10)
        public Guid? MyGuidBadDefault { get; set; } // MyGuidBadDefault
    }

    // DsOpeProcReturnModel
    public class DsOpeProcReturnModel
    {
        public int Id { get; set; } // ID (Primary key)
        public bool? Selected { get; set; } // Selected
    }

    // EnumWithDefaultValue
    public class EnumWithDefaultValue
    {
        public int Id { get; set; } // Id (Primary key)
        public int SomeEnum { get; set; } // SomeEnum
    }

    // EventProcessor
    public class EventProcessor
    {
        public int Id { get; set; } // Id (Primary key)
        public string Name { get; set; } // Name (length: 200)
        public string Description { get; set; } // Description (length: 512)
        public string EndpointAddress { get; set; } // EndpointAddress (length: 512)
        public bool Enabled { get; set; } // Enabled

        // Reverse navigation

        /// <summary>
        /// Child EventProcessorEventFilters where [EventProcessorEventFilter].[EventProcessorId] point to this entity (FK_EventProcessorEventFilter__EventProcessor)
        /// </summary>
        public virtual ICollection<EventProcessorEventFilter> EventProcessorEventFilters { get; set; } // EventProcessorEventFilter.FK_EventProcessorEventFilter__EventProcessor

        public EventProcessor()
        {
            EventProcessorEventFilters = new List<EventProcessorEventFilter>();
        }
    }

    // EventProcessorEventFilter
    public class EventProcessorEventFilter
    {
        public int Id { get; set; } // Id (Primary key)
        public int EventProcessorId { get; set; } // EventProcessorId
        public int WantedEventId { get; set; } // WantedEventId

        // Foreign keys

        /// <summary>
        /// Parent EventProcessor pointed by [EventProcessorEventFilter].([EventProcessorId]) (FK_EventProcessorEventFilter__EventProcessor)
        /// </summary>
        public virtual EventProcessor EventProcessor { get; set; } // FK_EventProcessorEventFilter__EventProcessor
    }

    // CV
    public class FFRS_Cv
    {
        public Guid BatchUid { get; set; } // BatchUID (Primary key)
        public int Cvid { get; set; } // CVID (Primary key)
        public string CvName { get; set; } // CVName (length: 200)
    }

    // FFRS_CvDataReturnModel
    public class FfrsCvDataReturnModel
    {
        public Guid BatchUid { get; set; } // BatchUID (Primary key)
        public int Cvid { get; set; } // CVID (Primary key)
        public string CvName { get; set; } // CVName
    }

    // FFRS_DataFromDboAndFfrsReturnModel
    public class FfrsDataFromDboAndFfrsReturnModel
    {
        public int Id { get; set; } // Id (Primary key)
        public int PrimaryColourId { get; set; } // PrimaryColourId (Primary key)
        public string CarMake { get; set; } // CarMake
        public string CvName { get; set; } // CVName
    }

    // FFRS_DataFromDboReturnModel
    public class FfrsDataFromDboReturnModel
    {
        public int Id { get; set; } // Id (Primary key)
        public int PrimaryColourId { get; set; } // PrimaryColourId (Primary key)
        public string CarMake { get; set; } // CarMake
    }

    // FinancialInstitutionOffice
    public class FinancialInstitutionOffice
    {
        public Guid FinancialInstitutionCode { get; set; } // FinancialInstitutionCode (Primary key)
        public Guid Code { get; set; } // Code
        public string OfficeName { get; set; } // OfficeName (length: 200)
    }

    // footer
    public class Footer
    {
        public int Id { get; set; } // ID (Primary key)
        public int OtherId { get; set; } // otherID
        public DateTime Added { get; set; } // added

        // Foreign keys

        /// <summary>
        /// Parent Header pointed by [footer].([Id], [OtherId]) (fooderFK)
        /// </summary>
        public virtual Header Header { get; set; } // fooderFK
    }

    // ForeignKeyIsNotEnforced
    public class ForeignKeyIsNotEnforced
    {
        public int Id { get; set; } // id (Primary key)
        public int? NullValue { get; set; } // null_value
        public int NotNullValue { get; set; } // not_null_value

        // Reverse navigation

        /// <summary>
        /// Child ForeignKeyIsNotEnforcedItems where [ForeignKeyIsNotEnforcedItem].[not_null_value] point to this entity (FK_ForeignKeyIsNotEnforcedItem_notnull_notnull)
        /// </summary>
        public virtual ICollection<ForeignKeyIsNotEnforcedItem> ForeignKeyIsNotEnforcedItems_NotNullValue { get; set; } // ForeignKeyIsNotEnforcedItem.FK_ForeignKeyIsNotEnforcedItem_notnull_notnull

        /// <summary>
        /// Child ForeignKeyIsNotEnforcedItems where [ForeignKeyIsNotEnforcedItem].[null_value] point to this entity (FK_ForeignKeyIsNotEnforcedItem_null_notnull)
        /// </summary>
        public virtual ICollection<ForeignKeyIsNotEnforcedItem> ForeignKeyIsNotEnforcedItems_NullValue { get; set; } // ForeignKeyIsNotEnforcedItem.FK_ForeignKeyIsNotEnforcedItem_null_notnull

        public ForeignKeyIsNotEnforced()
        {
            ForeignKeyIsNotEnforcedItems_NotNullValue = new List<ForeignKeyIsNotEnforcedItem>();
            ForeignKeyIsNotEnforcedItems_NullValue = new List<ForeignKeyIsNotEnforcedItem>();
        }
    }

    // ForeignKeyIsNotEnforcedItem
    public class ForeignKeyIsNotEnforcedItem
    {
        public int Id { get; set; } // id (Primary key)
        public int? NullValue { get; set; } // null_value
        public int NotNullValue { get; set; } // not_null_value

        // Foreign keys

        /// <summary>
        /// Parent ForeignKeyIsNotEnforced pointed by [ForeignKeyIsNotEnforcedItem].([NotNullValue]) (FK_ForeignKeyIsNotEnforcedItem_notnull_notnull)
        /// </summary>
        public virtual ForeignKeyIsNotEnforced ForeignKeyIsNotEnforced_NotNullValue { get; set; } // FK_ForeignKeyIsNotEnforcedItem_notnull_notnull

        /// <summary>
        /// Parent ForeignKeyIsNotEnforced pointed by [ForeignKeyIsNotEnforcedItem].([NullValue]) (FK_ForeignKeyIsNotEnforcedItem_null_notnull)
        /// </summary>
        public virtual ForeignKeyIsNotEnforced ForeignKeyIsNotEnforced_NullValue { get; set; } // FK_ForeignKeyIsNotEnforcedItem_null_notnull
    }

    // GetScreamAndShoutReturnModel
    public class GetScreamAndShoutReturnModel
    {
        public int Id { get; set; } // id (Primary key)
        public decimal? KoeffVed { get; set; } // KoeffVed
    }

    // HasPrincipalKeyTestChild
    public class HasPrincipalKeyTestChild
    {
        public int Id { get; set; } // Id (Primary key)
        public int A { get; set; } // A
        public int B { get; set; } // B
        public int? C { get; set; } // C
        public int? D { get; set; } // D

        // Foreign keys

        /// <summary>
        /// Parent HasPrincipalKeyTestParent pointed by [HasPrincipalKeyTestChild].([A], [B]) (FK_HasPrincipalKey_AB)
        /// </summary>
        public virtual HasPrincipalKeyTestParent HasPrincipalKeyTestParent { get; set; } // FK_HasPrincipalKey_AB
    }

    // HasPrincipalKeyTestParent
    public class HasPrincipalKeyTestParent
    {
        public int Id { get; set; } // Id (Primary key)
        public int A { get; set; } // A
        public int B { get; set; } // B
        public int? C { get; set; } // C
        public int? D { get; set; } // D

        // Reverse navigation

        /// <summary>
        /// Parent (One-to-One) HasPrincipalKeyTestParent pointed by [HasPrincipalKeyTestChild].([A], [B]) (FK_HasPrincipalKey_AB)
        /// </summary>
        public virtual HasPrincipalKeyTestChild HasPrincipalKeyTestChild { get; set; } // HasPrincipalKeyTestChild.FK_HasPrincipalKey_AB
    }

    // header
    public class Header
    {
        public int Id { get; set; } // ID (Primary key)
        public int AnotherId { get; set; } // anotherID (Primary key)
        public DateTime Added { get; set; } // added

        // Reverse navigation

        /// <summary>
        /// Child Footers where [footer].([ID], [otherID]) point to this entity (fooderFK)
        /// </summary>
        public virtual ICollection<Footer> Footers { get; set; } // footer.fooderFK

        public Header()
        {
            Footers = new List<Footer>();
        }
    }

    // hierarchy_test
    public class HierarchyTest
    {
        public int Id { get; set; } // ID (Primary key)
        public HierarchyId Hid { get; set; } // hid
    }

    // Role
    public class Issue47_Role
    {
        public int RoleId { get; set; } // RoleId (Primary key)
        public string Role { get; set; } // Role (length: 10)

        // Reverse navigation

        /// <summary>
        /// Child Issue47_UserRoles where [UserRoles].[RoleId] point to this entity (Issue47_UserRoles_roleid)
        /// </summary>
        public virtual ICollection<Issue47_UserRole> Issue47_UserRoles { get; set; } // UserRoles.Issue47_UserRoles_roleid

        public Issue47_Role()
        {
            Issue47_UserRoles = new List<Issue47_UserRole>();
        }
    }

    // Users
    public class Issue47_User
    {
        public int UserId { get; set; } // UserId (Primary key)
        public string Name { get; set; } // Name (length: 10)

        // Reverse navigation

        /// <summary>
        /// Child Issue47_UserRoles where [UserRoles].[UserId] point to this entity (Issue47_UserRoles_userid)
        /// </summary>
        public virtual ICollection<Issue47_UserRole> Issue47_UserRoles { get; set; } // UserRoles.Issue47_UserRoles_userid

        public Issue47_User()
        {
            Issue47_UserRoles = new List<Issue47_UserRole>();
        }
    }

    // UserRoles
    public class Issue47_UserRole
    {
        public int UserRoleId { get; set; } // UserRoleId (Primary key)
        public int UserId { get; set; } // UserId
        public int RoleId { get; set; } // RoleId

        // Foreign keys

        /// <summary>
        /// Parent Issue47_Role pointed by [UserRoles].([RoleId]) (Issue47_UserRoles_roleid)
        /// </summary>
        public virtual Issue47_Role Issue47_Role { get; set; } // Issue47_UserRoles_roleid

        /// <summary>
        /// Parent Issue47_User pointed by [UserRoles].([UserId]) (Issue47_UserRoles_userid)
        /// </summary>
        public virtual Issue47_User Issue47_User { get; set; } // Issue47_UserRoles_userid
    }

    // ScreamAndShout
    public class Kate_ScreamAndShout
    {
        public int KateId { get; set; } // KateID (Primary key)
        public string Description { get; set; } // description (length: 20)

        // Reverse navigation

        /// <summary>
        /// Child Alpha_Harish3485 where [Harish3485].[harish_id] point to this entity (FK_Harish)
        /// </summary>
        public virtual ICollection<Alpha_Harish3485> Alpha_Harish3485 { get; set; } // Harish3485.FK_Harish

        // Foreign keys

        /// <summary>
        /// Parent ScreamAndShout pointed by [ScreamAndShout].([KateId]) (KateFK)
        /// </summary>
        public virtual ScreamAndShout ScreamAndShout { get; set; } // KateFK

        public Kate_ScreamAndShout()
        {
            Alpha_Harish3485 = new List<Alpha_Harish3485>();
        }
    }

    // The table 'Kate_HelloReturnModel' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // Kate_HelloReturnModel
    public class KateHelloReturnModel
    {
        public int? @Static { get; set; } // static
        public int? @Readonly { get; set; } // readonly
    }

    // MultipleKeys
    public class MultipleKey
    {
        public int UserId { get; set; } // UserId (Primary key)
        public int FavouriteColourId { get; set; } // FavouriteColourId (Primary key)
        public int BestHolidayTypeId { get; set; } // BestHolidayTypeId (Primary key)
        public int BankId { get; set; } // BankId
        public int CarId { get; set; } // CarId
    }

    // Issue
    public class OneEightSix_Issue
    {
        public int Id { get; set; } // Id (Primary key)
        public string Title { get; set; } // Title (length: 100)
        public string Content { get; set; } // Content
        public int? ConsentDocumentId { get; set; } // ConsentDocumentId

        // Reverse navigation

        /// <summary>
        /// Child OneEightSix_UploadedFiles (Many-to-Many) mapped by table [IssueUploadedFile]
        /// </summary>
        public virtual ICollection<OneEightSix_UploadedFile> OneEightSix_UploadedFiles { get; set; } // Many to many mapping

        // Foreign keys

        /// <summary>
        /// Parent OneEightSix_UploadedFile pointed by [Issue].([ConsentDocumentId]) (FK_Issue_UploadedFileConsentDocument)
        /// </summary>
        public virtual OneEightSix_UploadedFile OneEightSix_UploadedFile { get; set; } // FK_Issue_UploadedFileConsentDocument

        public OneEightSix_Issue()
        {
            OneEightSix_UploadedFiles = new List<OneEightSix_UploadedFile>();
        }
    }

    // UploadedFile
    public class OneEightSix_UploadedFile
    {
        public int Id { get; set; } // Id (Primary key)
        public string FullPath { get; set; } // FullPath

        // Reverse navigation

        /// <summary>
        /// Child OneEightSix_Issues where [Issue].[ConsentDocumentId] point to this entity (FK_Issue_UploadedFileConsentDocument)
        /// </summary>
        public virtual ICollection<OneEightSix_Issue> OneEightSix_Issues_ConsentDocumentId { get; set; } // Issue.FK_Issue_UploadedFileConsentDocument

        /// <summary>
        /// Child OneEightSix_Issues (Many-to-Many) mapped by table [IssueUploadedFile]
        /// </summary>
        public virtual ICollection<OneEightSix_Issue> OneEightSix_Issues_IssueId { get; set; } // Many to many mapping

        public OneEightSix_UploadedFile()
        {
            OneEightSix_Issues_ConsentDocumentId = new List<OneEightSix_Issue>();
            OneEightSix_Issues_IssueId = new List<OneEightSix_Issue>();
        }
    }

    // PeriodTestTable
    public class PeriodTestTable
    {
        public int Id { get; set; } // id (Primary key)
        public int? Joe46Bloggs { get; set; } // joe.bloggs
    }

    // Person
    public class Person
    {
        public int Id { get; set; } // Id (Primary key)
        public string Name { get; set; } // Name (length: 50)

        // Reverse navigation

        /// <summary>
        /// Child PersonPosts where [PersonPosts].[CreatedBy] point to this entity (FK_PersonPosts_CreatedBy)
        /// </summary>
        public virtual ICollection<PersonPost> PersonPosts_CreatedBy { get; set; } // PersonPosts.FK_PersonPosts_CreatedBy

        /// <summary>
        /// Child PersonPosts where [PersonPosts].[UpdatedBy] point to this entity (FK_PersonPosts_UpdatedBy)
        /// </summary>
        public virtual ICollection<PersonPost> PersonPosts_UpdatedBy { get; set; } // PersonPosts.FK_PersonPosts_UpdatedBy

        public Person()
        {
            PersonPosts_CreatedBy = new List<PersonPost>();
            PersonPosts_UpdatedBy = new List<PersonPost>();
        }
    }

    // PersonPosts
    public class PersonPost
    {
        public int Id { get; set; } // Id (Primary key)
        public string Title { get; set; } // Title (length: 20)
        public string Body { get; set; } // Body (length: 100)
        public int CreatedBy { get; set; } // CreatedBy
        public int UpdatedBy { get; set; } // UpdatedBy

        // Foreign keys

        /// <summary>
        /// Parent Person pointed by [PersonPosts].([CreatedBy]) (FK_PersonPosts_CreatedBy)
        /// </summary>
        public virtual Person Person_CreatedBy { get; set; } // FK_PersonPosts_CreatedBy

        /// <summary>
        /// Parent Person pointed by [PersonPosts].([UpdatedBy]) (FK_PersonPosts_UpdatedBy)
        /// </summary>
        public virtual Person Person_UpdatedBy { get; set; } // FK_PersonPosts_UpdatedBy
    }

    // pk_ordinal_test
    public class PkOrdinalTest
    {
        public int C1 { get; set; } // C1 (Primary key)
        public int C3 { get; set; } // C3 (Primary key)
        public int C2 { get; set; } // C2
    }

    // PropertyTypesToAdd
    public class PropertyTypesToAdd
    {
        public int Id { get; set; } // id (Primary key)
        public DateTime? DtDefault { get; set; } // dt_default
        public DateTime? Dt7 { get; set; } // dt7
        public string DefaultCheck { get; set; } // defaultCheck (length: 10)

        // Reverse navigation

        /// <summary>
        /// Child Beta_Harish3485 where [Harish3485].[another_id] point to this entity (FK_Harish)
        /// </summary>
        public virtual ICollection<Beta_Harish3485> Beta_Harish3485 { get; set; } // Harish3485.FK_Harish

        public PropertyTypesToAdd()
        {
            Beta_Harish3485 = new List<Beta_Harish3485>();
        }
    }

    // RebelGalaxyBroadsides
    public class RebelGalaxyBroadside
    {
        public int Damage { get; set; } // Damage (Primary key)
        public int Cost { get; set; } // Cost (Primary key)
        public string WeaponName { get; set; } // WeaponName (length: 30)
    }

    // RebelGalaxyShips
    public class RebelGalaxyShip
    {
        public int Broadsides { get; set; } // Broadsides (Primary key)
        public int Turrets { get; set; } // Turrets (Primary key)
        public int Cost { get; set; } // Cost (Primary key)
        public string ShipName { get; set; } // ShipName (length: 30)
    }

    // RebelGalaxyWeapons
    public class RebelGalaxyWeapon
    {
        public int Damage { get; set; } // Damage (Primary key)
        public int Cost { get; set; } // Cost (Primary key)
        public string WeaponName { get; set; } // WeaponName (length: 30)
    }

    // ScreamAndShout
    public class ScreamAndShout
    {
        public int Id { get; set; } // id (Primary key)
        public decimal? KoeffVed { get; set; } // KoeffVed

        // Reverse navigation

        /// <summary>
        /// Parent (One-to-One) ScreamAndShout pointed by [ScreamAndShout].[KateID] (KateFK)
        /// </summary>
        public virtual Kate_ScreamAndShout Kate_ScreamAndShout { get; set; } // ScreamAndShout.KateFK
    }

    // SequenceTest
    public class SequenceTest
    {
        public int Id { get; set; } // Id (Primary key)
        public long CntByBigInt { get; set; } // CntByBigInt
        public byte CntByTinyInt { get; set; } // CntByTinyInt
        public short CntBySmallInt { get; set; } // CntBySmallInt
        public decimal CntByDecimal { get; set; } // CntByDecimal
        public decimal CntByNumeric { get; set; } // CntByNumeric
    }

    // SpatialTypesNoParamsReturnModel
    public class SpatialTypesNoParamsReturnModel
    {
        public int Dollar { get; set; } // Dollar (Primary key)
        public DateTime SomeDate { get; set; } // someDate (Primary key)
        public NetTopologySuite.Geometries.Point GeographyType { get; set; } // GeographyType
        public NetTopologySuite.Geometries.Geometry GeometryType { get; set; } // GeometryType
    }

    // StockPrediction
    public class StockPrediction
    {
        public int Id { get; set; } // id (Primary key)
        public string Name { get; set; } // name (length: 50)
        public DateTime Date { get; set; } // date
        public decimal Open { get; set; } // open
        public decimal High { get; set; } // high
        public decimal Low { get; set; } // low
        public decimal Close { get; set; } // close
        public decimal AdjClose { get; set; } // adj_close
        public int Volume { get; set; } // volume
        public bool? Buy { get; set; } // buy
    }

    // StpNoParamsTestReturnModel
    public class StpNoParamsTestReturnModel
    {
        public int CodeObjectNo { get; set; } // codeObjectNo (Primary key)
        public int? ApplicationNo { get; set; } // applicationNo
    }

    // StpNullableParamsTestReturnModel
    public class StpNullableParamsTestReturnModel
    {
        public int CodeObjectNo { get; set; } // codeObjectNo (Primary key)
        public int? ApplicationNo { get; set; } // applicationNo
    }

    // StpTestReturnModel
    public class StpTestReturnModel
    {
        public int CodeObjectNo { get; set; } // codeObjectNo (Primary key)
        public int? ApplicationNo { get; set; } // applicationNo
        public int Type { get; set; } // type (Primary key)
        public string EName { get; set; } // eName
        public string AName { get; set; } // aName
        public string Description { get; set; } // description
        public string CodeName { get; set; } // codeName
        public string Note { get; set; } // note
        public bool IsObject { get; set; } // isObject (Primary key)
        public byte[] VersionNumber { get; set; } // versionNumber
    }

    // StpTestUnderscoreTestReturnModel
    public class StpTestUnderscoreTestReturnModel
    {
        public int CodeObjectNo { get; set; } // code_object_no (Primary key)
        public int? ApplicationNo { get; set; } // application_no
    }

    // TableA
    public class TableA
    {
        public int TableAId { get; set; } // TableAId (Primary key)
        public string TableADesc { get; set; } // TableADesc (length: 20)

        // Reverse navigation

        /// <summary>
        /// Child TableBs where [TableB].[TableAId] point to this entity (FK_TableA_CompositeKey_Req)
        /// </summary>
        public virtual ICollection<TableB> TableBs { get; set; } // TableB.FK_TableA_CompositeKey_Req

        public TableA()
        {
            TableBs = new List<TableB>();
        }
    }

    // TableB
    public class TableB
    {
        public int TableBId { get; set; } // TableBId (Primary key)
        public int TableAId { get; set; } // TableAId (Primary key)
        public int? ParentTableAId { get; set; } // ParentTableAId
        public string TableBDesc { get; set; } // TableBDesc (length: 20)

        // Reverse navigation

        /// <summary>
        /// Parent (One-to-One) TableB pointed by [TableB].([TableAId], [TableBId]) (ParentTableB_Hierarchy)
        /// </summary>
        public virtual TableB TableB2 { get; set; } // TableB.ParentTableB_Hierarchy

        // Foreign keys

        /// <summary>
        /// Parent TableA pointed by [TableB].([TableAId]) (FK_TableA_CompositeKey_Req)
        /// </summary>
        public virtual TableA TableA_TableAId { get; set; } // FK_TableA_CompositeKey_Req

        /// <summary>
        /// Parent TableB pointed by [TableB].([TableAId], [TableBId]) (ParentTableB_Hierarchy)
        /// </summary>
        public virtual TableB TableB1 { get; set; } // ParentTableB_Hierarchy
    }

    // table with duplicate column names
    public class TableWithDuplicateColumnName
    {
        public int Id { get; set; } // id (Primary key)
        public int UserId1 { get; set; } // user_id
        public int UserId2 { get; set; } // UserId
        public int UserId3 { get; set; } // User Id
        public int UserId4 { get; set; } // User  Id
        public int UserId { get; set; } // user__id
    }

    // table with space
    public class TableWithSpace
    {
        public int Id { get; set; } // id (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child TableWithSpaceAndInColumns (Many-to-Many) mapped by table [table mapping with space]
        /// </summary>
        public virtual ICollection<TableWithSpaceAndInColumn> TableWithSpaceAndInColumns { get; set; } // Many to many mapping

        public TableWithSpace()
        {
            TableWithSpaceAndInColumns = new List<TableWithSpaceAndInColumn>();
        }
    }

    // table with space and in columns
    public class TableWithSpaceAndInColumn
    {
        public int IdValue { get; set; } // id value (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child TableWithSpaces (Many-to-Many) mapped by table [table mapping with space]
        /// </summary>
        public virtual ICollection<TableWithSpace> TableWithSpaces { get; set; } // Many to many mapping

        public TableWithSpaceAndInColumn()
        {
            TableWithSpaces = new List<TableWithSpace>();
        }
    }

    // TableWithSpaceInColumnOnly
    public class TableWithSpaceInColumnOnly
    {
        public int IdValue { get; set; } // id value (Primary key)
    }

    // TadeuszSobol
    public class TadeuszSobol
    {
        public int Id { get; set; } // Id (Primary key)
        public string Description { get; set; } // Description
        public string Notes { get; set; } // Notes
        public string Name { get; set; } // Name (length: 10)
    }

    // Task
    public class Task1
    {
        public long TaskId { get; set; } // TaskId (Primary key)
    }

    // tblOrders
    public class TblOrder
    {
        public int Id { get; set; } // ID (Primary key)
        public DateTime Added { get; set; } // added

        // Reverse navigation

        /// <summary>
        /// Child TblOrderLines where [tblOrderLines].[OrderID] point to this entity (tblOrdersFK)
        /// </summary>
        public virtual ICollection<TblOrderLine> TblOrderLines { get; set; } // tblOrderLines.tblOrdersFK

        public TblOrder()
        {
            TblOrderLines = new List<TblOrderLine>();
        }
    }

    // tblOrderErrors
    public class TblOrderError
    {
        public int Id { get; set; } // ID (Primary key)
        public string Error { get; set; } // error (length: 50)
    }

    // tblOrderErrorsAB_
    public class TblOrderErrorsAb
    {
        public int Id { get; set; } // ID (Primary key)
        public string Error { get; set; } // error (length: 50)
    }

    // tblOrderLines
    public class TblOrderLine
    {
        public int Id { get; set; } // ID (Primary key)
        public int OrderId { get; set; } // OrderID
        public string Sku { get; set; } // sku (length: 15)

        // Foreign keys

        /// <summary>
        /// Parent TblOrder pointed by [tblOrderLines].([OrderId]) (tblOrdersFK)
        /// </summary>
        public virtual TblOrder TblOrder { get; set; } // tblOrdersFK
    }

    // The table 'TestReturnStringReturnModel' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // TestReturnStringReturnModel
    public class TestReturnStringReturnModel
    {
        public string Error { get; set; } // error
    }

    // Ticket
    public class Ticket
    {
        public long Id { get; set; } // Id (Primary key)
        public long CreatedById { get; set; } // CreatedById
        public long? ModifiedById { get; set; } // ModifiedById

        // Foreign keys

        /// <summary>
        /// Parent AppUser pointed by [Ticket].([CreatedById]) (FK_Ticket_AppUser)
        /// </summary>
        public virtual AppUser CreatedBy { get; set; } // FK_Ticket_AppUser

        /// <summary>
        /// Parent AppUser pointed by [Ticket].([ModifiedById]) (FK_Ticket_AppUser1)
        /// </summary>
        public virtual AppUser ModifiedBy { get; set; } // FK_Ticket_AppUser1
    }

    // Token
    public class Token
    {
        public Guid Id { get; set; } // Id (Primary key)
        public bool Enabled { get; set; } // Enabled
    }

    // User
    public class User
    {
        public int Id { get; set; } // ID (Primary key)
        public string ExternalUserId { get; set; } // ExternalUserID (length: 50)

        // Reverse navigation

        /// <summary>
        /// Child UserDocuments where [User_Document].[CreatedByUserID] point to this entity (FK_User_Document_User1)
        /// </summary>
        public virtual ICollection<UserDocument> UserDocuments_CreatedByUserId { get; set; } // User_Document.FK_User_Document_User1

        /// <summary>
        /// Child UserDocuments where [User_Document].[UserID] point to this entity (FK_User_Document_User)
        /// </summary>
        public virtual ICollection<UserDocument> UserDocuments_UserId { get; set; } // User_Document.FK_User_Document_User

        public User()
        {
            UserDocuments_CreatedByUserId = new List<UserDocument>();
            UserDocuments_UserId = new List<UserDocument>();
        }
    }

    // User309
    public class User309
    {
        public long UserId { get; set; } // UserID (Primary key)
        public string Lastname { get; set; } // Lastname (length: 100)
        public string Firstname { get; set; } // Firstname (length: 100)
        public int? PhoneCountryId { get; set; } // PhoneCountryID

        // Foreign keys

        /// <summary>
        /// Parent Country pointed by [User309].([PhoneCountryId]) (FK_User309_PhoneCountry)
        /// </summary>
        public virtual Country Country { get; set; } // FK_User309_PhoneCountry
    }

    // User_Document
    public class UserDocument
    {
        public int Id { get; set; } // ID (Primary key)
        public int UserId { get; set; } // UserID
        public int CreatedByUserId { get; set; } // CreatedByUserID

        // Foreign keys

        /// <summary>
        /// Parent User pointed by [User_Document].([CreatedByUserId]) (FK_User_Document_User1)
        /// </summary>
        public virtual User CreatedByUser { get; set; } // FK_User_Document_User1

        /// <summary>
        /// Parent User pointed by [User_Document].([UserId]) (FK_User_Document_User)
        /// </summary>
        public virtual User User_UserId { get; set; } // FK_User_Document_User
    }

    // The table 'XmlDataV1ReturnModel' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // XmlDataV1ReturnModel
    public class XmlDataV1ReturnModel
    {
        public DateTime? Column1 { get; set; } // Column1
        public string Column2 { get; set; } // Column2
    }


    #endregion

    #region POCO Configuration

    // A
    public class AConfiguration : IEntityTypeConfiguration<A>
    {
        public void Configure(EntityTypeBuilder<A> builder)
        {
            builder.ToTable("A", "dbo");
            builder.HasKey(x => x.AId).HasName("PK_A").IsClustered();

            builder.Property(x => x.AId).HasColumnName(@"AId").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.C1).HasColumnName(@"C1").HasColumnType("int").IsRequired();
            builder.Property(x => x.C2).HasColumnName(@"C2").HasColumnType("int").IsRequired();

            // Foreign keys
            builder.HasOne(a => a.Aaref).WithMany(b => b.A).HasForeignKey(c => new { c.C1, c.C2 }).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_A_A");

            builder.HasIndex(x => new { x.C1, x.C2 }).HasDatabaseName("IX_A_C1_C2");
        }
    }

    // AAREF
    public class AarefConfiguration : IEntityTypeConfiguration<Aaref>
    {
        public void Configure(EntityTypeBuilder<Aaref> builder)
        {
            builder.ToTable("AAREF", "dbo");
            builder.HasKey(x => new { x.C1, x.C2 }).HasName("PK_AREF").IsClustered();

            builder.Property(x => x.C1).HasColumnName(@"C1").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.C2).HasColumnName(@"C2").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.CreatedUtc).HasColumnName(@"CreatedUTC").HasColumnType("datetime2").IsRequired();
        }
    }

    // AB_OrderLinesAB_
    public class AbOrderLinesAbConfiguration : IEntityTypeConfiguration<AbOrderLinesAb>
    {
        public void Configure(EntityTypeBuilder<AbOrderLinesAb> builder)
        {
            builder.ToTable("AB_OrderLinesAB_", "dbo");
            builder.HasKey(x => x.Id).HasName("PK__AB_Order__3214EC2731B53C8A").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.OrderId).HasColumnName(@"OrderID").HasColumnType("int").IsRequired();
            builder.Property(x => x.Sku).HasColumnName(@"sku").HasColumnType("varchar(15)").IsRequired(false).IsUnicode(false).HasMaxLength(15);

            // Foreign keys
            builder.HasOne(a => a.AbOrdersAb).WithMany(b => b.AbOrderLinesAbs).HasForeignKey(c => c.OrderId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("AB_OrderLinesAB_FK");

            builder.HasIndex(x => x.OrderId).HasDatabaseName("IX_AB_OrderLinesAB__OrderID");
        }
    }

    // AB_OrdersAB_
    public class AbOrdersAbConfiguration : IEntityTypeConfiguration<AbOrdersAb>
    {
        public void Configure(EntityTypeBuilder<AbOrdersAb> builder)
        {
            builder.ToTable("AB_OrdersAB_", "dbo");
            builder.HasKey(x => x.Id).HasName("PK__AB_Order__3214EC277606C4E4").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Added).HasColumnName(@"added").HasColumnType("datetime").IsRequired();
        }
    }

    // Harish3485
    public class Alpha_Harish3485Configuration : IEntityTypeConfiguration<Alpha_Harish3485>
    {
        public void Configure(EntityTypeBuilder<Alpha_Harish3485> builder)
        {
            builder.ToTable("Harish3485", "Alpha");
            builder.HasKey(x => x.Id).HasName("PK__Harish34__3213E83F6B711DC1").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.HarishId).HasColumnName(@"harish_id").HasColumnType("int").IsRequired();

            // Foreign keys
            builder.HasOne(a => a.Kate_ScreamAndShout).WithMany(b => b.Alpha_Harish3485).HasForeignKey(c => c.HarishId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Harish");

            builder.HasIndex(x => x.HarishId).HasDatabaseName("IX_Harish3485_harish_id");
        }
    }

    // workflow
    public class Alpha_WorkflowConfiguration : IEntityTypeConfiguration<Alpha_Workflow>
    {
        public void Configure(EntityTypeBuilder<Alpha_Workflow> builder)
        {
            builder.ToTable("workflow", "Alpha");
            builder.HasKey(x => x.Id).HasName("PK__workflow__3214EC072804087E").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Description).HasColumnName(@"Description").HasColumnType("varchar(10)").IsRequired(false).IsUnicode(false).HasMaxLength(10);
        }
    }

    // UserFacilityServiceRole
    public class App_UserFacilityServiceRoleConfiguration : IEntityTypeConfiguration<App_UserFacilityServiceRole>
    {
        public void Configure(EntityTypeBuilder<App_UserFacilityServiceRole> builder)
        {
            builder.ToTable("UserFacilityServiceRole", "App");
            builder.HasKey(x => new { x.UserId, x.AppId, x.FsrId }).HasName("PK_UserFacilityServiceRole").IsClustered();

            builder.Property(x => x.UserId).HasColumnName(@"userId").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.AppId).HasColumnName(@"appId").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.FsrId).HasColumnName(@"fsrId").HasColumnType("int").IsRequired().ValueGeneratedNever();
        }
    }

    // AppUser
    public class AppUserConfiguration : IEntityTypeConfiguration<AppUser>
    {
        public void Configure(EntityTypeBuilder<AppUser> builder)
        {
            builder.ToTable("AppUser", "dbo");
            builder.HasKey(x => x.Id).HasName("PK__AppUser__3214EC074EE50760").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("bigint").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);
        }
    }

    // Attendee
    public class AttendeeConfiguration : IEntityTypeConfiguration<Attendee>
    {
        public void Configure(EntityTypeBuilder<Attendee> builder)
        {
            builder.ToTable("Attendee", "dbo");
            builder.HasKey(x => x.AttendeeId).HasName("PK_Attendee").IsClustered();

            builder.Property(x => x.AttendeeId).HasColumnName(@"AttendeeID").HasColumnType("bigint").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.Lastname).HasColumnName(@"Lastname").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);
            builder.Property(x => x.Firstname).HasColumnName(@"Firstname").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);
            builder.Property(x => x.PhoneCountryId).HasColumnName(@"PhoneCountryID").HasColumnType("int").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.Country).WithMany(b => b.Attendees).HasForeignKey(c => c.PhoneCountryId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Attendee_PhoneCountry");

            builder.HasIndex(x => x.PhoneCountryId).HasDatabaseName("IX_Attendee_PhoneCountryID");
        }
    }

    // BatchTest
    public class BatchTestConfiguration : IEntityTypeConfiguration<BatchTest>
    {
        public void Configure(EntityTypeBuilder<BatchTest> builder)
        {
            builder.ToTable("BatchTest", "dbo");
            builder.HasKey(x => x.Code).HasName("PK__BatchTes__357D4CF8F557E292").IsClustered();

            builder.Property(x => x.Code).HasColumnName(@"code").HasColumnType("nvarchar(8)").IsRequired().HasMaxLength(8).ValueGeneratedNever();
        }
    }

    // Harish3485
    public class Beta_Harish3485Configuration : IEntityTypeConfiguration<Beta_Harish3485>
    {
        public void Configure(EntityTypeBuilder<Beta_Harish3485> builder)
        {
            builder.ToTable("Harish3485", "Beta");
            builder.HasKey(x => x.Id).HasName("PK__Harish34__3213E83F1B89ADF0").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.AnotherId).HasColumnName(@"another_id").HasColumnType("int").IsRequired();

            // Foreign keys
            builder.HasOne(a => a.PropertyTypesToAdd).WithMany(b => b.Beta_Harish3485).HasForeignKey(c => c.AnotherId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Harish");

            builder.HasIndex(x => x.AnotherId).HasDatabaseName("IX_Harish3485_another_id");
        }
    }

    // ToAlpha
    public class Beta_ToAlphaConfiguration : IEntityTypeConfiguration<Beta_ToAlpha>
    {
        public void Configure(EntityTypeBuilder<Beta_ToAlpha> builder)
        {
            builder.ToTable("ToAlpha", "Beta");
            builder.HasKey(x => x.Id).HasName("PK__ToAlpha__3214EC07B6C8B1E7").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.AlphaId).HasColumnName(@"AlphaId").HasColumnType("int").IsRequired();

            // Foreign keys
            builder.HasOne(a => a.Alpha_Workflow).WithMany(b => b.Beta_ToAlphas).HasForeignKey(c => c.AlphaId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("BetaToAlpha_AlphaWorkflow");

            builder.HasIndex(x => x.AlphaId).HasDatabaseName("IX_ToAlpha_AlphaId");
        }
    }

    // workflow
    public class Beta_WorkflowConfiguration : IEntityTypeConfiguration<Beta_Workflow>
    {
        public void Configure(EntityTypeBuilder<Beta_Workflow> builder)
        {
            builder.ToTable("workflow", "Beta");
            builder.HasKey(x => x.Id).HasName("PK__workflow__3214EC07906CBEB9").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Description).HasColumnName(@"Description").HasColumnType("varchar(10)").IsRequired(false).IsUnicode(false).HasMaxLength(10);
        }
    }

    // BITFIDDLERALLCAPS
    public class BitfiddlerallcapConfiguration : IEntityTypeConfiguration<Bitfiddlerallcap>
    {
        public void Configure(EntityTypeBuilder<Bitfiddlerallcap> builder)
        {
            builder.ToTable("BITFIDDLERALLCAPS", "dbo");
            builder.HasKey(x => x.Id).HasName("PK__BITFIDDL__3214EC073CF127E7").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
        }
    }

    // BitFiddlerCATEGORIES
    public class BitFiddlerCategoRyConfiguration : IEntityTypeConfiguration<BitFiddlerCategoRy>
    {
        public void Configure(EntityTypeBuilder<BitFiddlerCategoRy> builder)
        {
            builder.ToTable("BitFiddlerCATEGORIES", "dbo");
            builder.HasKey(x => x.Id).HasName("PK__BitFiddl__3214EC07A08CA919").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
        }
    }

    // BitFiddlerCURRENCIES
    public class BitFiddlerCurrenCyConfiguration : IEntityTypeConfiguration<BitFiddlerCurrenCy>
    {
        public void Configure(EntityTypeBuilder<BitFiddlerCurrenCy> builder)
        {
            builder.ToTable("BitFiddlerCURRENCIES", "dbo");
            builder.HasKey(x => x.Id).HasName("PK__BitFiddl__3214EC07D56DB345").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
        }
    }

    // Blah
    public class BlahConfiguration : IEntityTypeConfiguration<Blah>
    {
        public void Configure(EntityTypeBuilder<Blah> builder)
        {
            builder.ToTable("Blah", "dbo");
            builder.HasKey(x => x.BlahId).HasName("PK_Blah").IsClustered();

            builder.Property(x => x.BlahId).HasColumnName(@"BlahID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.HasMany<Blah>(t => t.Blahs_BlahId2).WithMany(t => t.Blahs_BlahId).UsingEntity<Dictionary<string, object>>("BlahBlahLink",
                    j => j.HasOne<Blah>().WithMany().HasForeignKey("BlahID2"),
                    j => j.HasOne<Blah>().WithMany().HasForeignKey("BlahID"),
                    j => j.ToTable("BlahBlahLink", "dbo"));
            builder.HasMany<Blarg>(t => t.Blargs).WithMany(t => t.Blahs).UsingEntity<Dictionary<string, object>>("BlahBlargLink",
                    j => j.HasOne<Blarg>().WithMany().HasForeignKey("BlargID"),
                    j => j.HasOne<Blah>().WithMany().HasForeignKey("BlahID"),
                    j => j.ToTable("BlahBlargLink", "dbo"));
        }
    }

    // BlahBlahLink_readonly
    public class BlahBlahLinkReadonlyConfiguration : IEntityTypeConfiguration<BlahBlahLinkReadonly>
    {
        public void Configure(EntityTypeBuilder<BlahBlahLinkReadonly> builder)
        {
            builder.ToTable("BlahBlahLink_readonly", "dbo");
            builder.HasKey(x => new { x.BlahId, x.BlahId2 }).HasName("PK_BlahBlahLink_ro").IsClustered();

            builder.Property(x => x.BlahId).HasColumnName(@"BlahID").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.BlahId2).HasColumnName(@"BlahID2").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.RowVersion).HasColumnName(@"RowVersion").HasColumnType("timestamp").IsRequired(false);
            builder.Property(x => x.Id).HasColumnName(@"id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Id2).HasColumnName(@"id2").HasColumnType("int").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.Blah_BlahId).WithMany(b => b.BlahBlahLinkReadonlies_BlahId).HasForeignKey(c => c.BlahId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_BlahBlahLink_Blah_ro");
            builder.HasOne(a => a.Blah_BlahId2).WithMany(b => b.BlahBlahLinkReadonlies_BlahId2).HasForeignKey(c => c.BlahId2).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_BlahBlahLink_Blah_ro2");

            builder.HasIndex(x => x.BlahId2).HasDatabaseName("IX_BlahBlahLink_readonly_BlahID2");
        }
    }

    // BlahBlahLink_v2
    public class BlahBlahLinkV2Configuration : IEntityTypeConfiguration<BlahBlahLinkV2>
    {
        public void Configure(EntityTypeBuilder<BlahBlahLinkV2> builder)
        {
            builder.ToTable("BlahBlahLink_v2", "dbo");
            builder.HasKey(x => new { x.BlahId, x.BlahId2 }).HasName("PK_BlahBlahLinkv2_ro").IsClustered();

            builder.Property(x => x.BlahId).HasColumnName(@"BlahID").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.BlahId2).HasColumnName(@"BlahID2").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.Dummy1).HasColumnName(@"dummy1").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Dummy2).HasColumnName(@"dummy2").HasColumnType("int").IsRequired();
            builder.Property(x => x.Hello).HasColumnName(@"hello").HasColumnType("int").IsRequired();

            // Foreign keys
            builder.HasOne(a => a.Blah_BlahId).WithMany(b => b.BlahBlahLinkV2_BlahId).HasForeignKey(c => c.BlahId).HasConstraintName("FK_BlahBlahLinkv2_Blah_ro");
            builder.HasOne(a => a.Blah_BlahId2).WithMany(b => b.BlahBlahLinkV2_BlahId2).HasForeignKey(c => c.BlahId2).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_BlahBlahLinkv2_Blah_ro2");

            builder.HasIndex(x => x.BlahId2).HasDatabaseName("IX_BlahBlahLink_v2_BlahID2");
        }
    }

    // Blarg
    public class BlargConfiguration : IEntityTypeConfiguration<Blarg>
    {
        public void Configure(EntityTypeBuilder<Blarg> builder)
        {
            builder.ToTable("Blarg", "dbo");
            builder.HasKey(x => x.BlargId).HasName("PK_Blarg").IsClustered();

            builder.Property(x => x.BlargId).HasColumnName(@"BlargID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
        }
    }

    // BringTheAction
    public class BringTheActionConfiguration : IEntityTypeConfiguration<BringTheAction>
    {
        public void Configure(EntityTypeBuilder<BringTheAction> builder)
        {
            builder.ToTable("BringTheAction", "dbo");
            builder.HasKey(x => x.C36).HasName("PK__BringThe__3BD01849891AAF49").IsClustered();

            builder.Property(x => x.C36).HasColumnName(@"$").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.C37).HasColumnName(@"%").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.C163).HasColumnName(@"£").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.C38Fred36).HasColumnName(@"&fred$").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Abc4792).HasColumnName(@"abc/\").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Joe46Bloggs).HasColumnName(@"joe.bloggs").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.SimonHughes).HasColumnName(@"simon-hughes").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Description).HasColumnName(@"description").HasColumnType("varchar(20)").IsRequired().IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.SomeDate).HasColumnName(@"someDate").HasColumnType("datetime2").IsRequired();
            builder.Property(x => x.Obs).HasColumnName(@"Obs").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.Obs1).HasColumnName(@"Obs1").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.Obs2).HasColumnName(@"Obs2").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.Obs3).HasColumnName(@"Obs3").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.@Static).HasColumnName(@"static").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.@Readonly).HasColumnName(@"readonly").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.C123Hi).HasColumnName(@"123Hi").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Areal).HasColumnName(@"areal").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.Afloat).HasColumnName(@"afloat").HasColumnType("float").HasPrecision(53).IsRequired(false);
            builder.Property(x => x.Afloat8).HasColumnName(@"afloat8").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.Afloat20).HasColumnName(@"afloat20").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.Afloat24).HasColumnName(@"afloat24").HasColumnType("real").IsRequired(false);
            builder.Property(x => x.Afloat53).HasColumnName(@"afloat53").HasColumnType("float").HasPrecision(53).IsRequired(false);
            builder.Property(x => x.Adecimal).HasColumnName(@"adecimal").HasColumnType("decimal(18,0)").HasPrecision(18,0).IsRequired(false);
            builder.Property(x => x.Adecimal194).HasColumnName(@"adecimal_19_4").HasColumnType("decimal(19,4)").HasPrecision(19,4).IsRequired(false);
            builder.Property(x => x.Adecimal103).HasColumnName(@"adecimal_10_3").HasColumnType("decimal(10,3)").HasPrecision(10,3).IsRequired(false);
            builder.Property(x => x.Anumeric).HasColumnName(@"anumeric").HasColumnType("numeric(18,0)").HasPrecision(18,0).IsRequired(false);
            builder.Property(x => x.Anumeric52).HasColumnName(@"anumeric_5_2").HasColumnType("numeric(5,2)").HasPrecision(5,2).IsRequired(false);
            builder.Property(x => x.Anumeric113).HasColumnName(@"anumeric_11_3").HasColumnType("numeric(11,3)").HasPrecision(11,3).IsRequired(false);
            builder.Property(x => x.Amoney).HasColumnName(@"amoney").HasColumnType("money").IsRequired(false);
            builder.Property(x => x.Asmallmoney).HasColumnName(@"asmallmoney").HasColumnType("smallmoney").IsRequired(false);
            builder.Property(x => x.Brandon).HasColumnName(@"brandon").HasColumnType("int").IsRequired(false);
        }
    }

    // Burak1
    public class Burak1Configuration : IEntityTypeConfiguration<Burak1>
    {
        public void Configure(EntityTypeBuilder<Burak1> builder)
        {
            builder.ToTable("Burak1", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_Burak1").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"id").HasColumnType("bigint").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.IdT).HasColumnName(@"id_t").HasColumnType("bigint").IsRequired();
            builder.Property(x => x.Num).HasColumnName(@"num").HasColumnType("bigint").IsRequired();

            // Foreign keys
            builder.HasOne(a => a.Burak2_Id).WithOne(b => b.Burak1_Id).HasForeignKey<Burak1>(c => c.Id).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Burak_Test2");
            builder.HasOne(a => a.Burak2_IdT).WithOne(b => b.Burak1_IdT).HasPrincipalKey<Burak2>(p => new { p.Id, p.Num }).HasForeignKey<Burak1>(c => new { c.IdT, c.Num }).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Burak_Test1");

            builder.HasIndex(x => new { x.IdT, x.Num }).HasDatabaseName("IX_Burak1_id_t_num").IsUnique();
        }
    }

    // Burak2
    public class Burak2Configuration : IEntityTypeConfiguration<Burak2>
    {
        public void Configure(EntityTypeBuilder<Burak2> builder)
        {
            builder.ToTable("Burak2", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_Burak2").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"id").HasColumnType("bigint").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Num).HasColumnName(@"num").HasColumnType("bigint").IsRequired();

            builder.HasIndex(x => new { x.Id, x.Num }).HasDatabaseName("AK_Burak2_id_num").IsUnique();
            builder.HasIndex(x => new { x.Id, x.Num }).HasDatabaseName("U_Burak2").IsUnique();
        }
    }

    // CalculatedColumnNotNull
    public class CalculatedColumnNotNullConfiguration : IEntityTypeConfiguration<CalculatedColumnNotNull>
    {
        public void Configure(EntityTypeBuilder<CalculatedColumnNotNull> builder)
        {
            builder.ToTable("CalculatedColumnNotNull", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_CalculatedColumnNotNull").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Type).HasColumnName(@"Type").HasColumnType("tinyint").IsRequired();
            builder.Property(x => x.IsCalendar).HasColumnName(@"IsCalendar").HasColumnType("bit").IsRequired();
            builder.Property(x => x.IsUtilization).HasColumnName(@"IsUtilization").HasColumnType("bit").IsRequired();
        }
    }

    // Car
    public class CarConfiguration : IEntityTypeConfiguration<Car>
    {
        public void Configure(EntityTypeBuilder<Car> builder)
        {
            builder.ToTable("Car", "dbo");
            builder.HasKey(x => x.Id).HasName("PK__Car__3214EC0702833709").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.PrimaryColourId).HasColumnName(@"PrimaryColourId").HasColumnType("int").IsRequired();
            builder.Property(x => x.CarMake).HasColumnName(@"CarMake").HasColumnType("varchar(255)").IsRequired().IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.ComputedColumn).HasColumnName(@"computed_column").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ComputedColumnPersisted).HasColumnName(@"computed_column_persisted").HasColumnType("int").IsRequired();

            // Foreign keys
            builder.HasOne(a => a.Colour).WithMany(b => b.Cars_PrimaryColourId).HasForeignKey(c => c.PrimaryColourId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("CarPrimaryColourFK");
            builder.HasMany<Colour>(t => t.Colours).WithMany(t => t.Cars_CarId).UsingEntity<Dictionary<string, object>>("CarToColour",
                    j => j.HasOne<Colour>().WithMany().HasForeignKey("ColourId"),
                    j => j.HasOne<Car>().WithMany().HasForeignKey("CarId"),
                    j => j.ToTable("CarToColour", "dbo"));

            builder.HasIndex(x => x.PrimaryColourId).HasDatabaseName("IX_Car_PrimaryColourId");
        }
    }

    // ClientCreationState
    public class ClientCreationStateConfiguration : IEntityTypeConfiguration<ClientCreationState>
    {
        public void Configure(EntityTypeBuilder<ClientCreationState> builder)
        {
            builder.ToTable("ClientCreationState", "dbo");
            builder.HasKey(x => x.Id).HasName("PK__ClientCr__3213E83F95DD2206").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"id").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.WebhookSetup).HasColumnName(@"WebhookSetup").HasColumnType("bit").IsRequired();
            builder.Property(x => x.AuthSetup).HasColumnName(@"AuthSetup").HasColumnType("bit").IsRequired();
            builder.Property(x => x.AssignedCarrier).HasColumnName(@"AssignedCarrier").HasColumnType("bit").IsRequired();
        }
    }

    // CMS_File
    public class CmsFileConfiguration : IEntityTypeConfiguration<CmsFile>
    {
        public void Configure(EntityTypeBuilder<CmsFile> builder)
        {
            builder.ToTable("CMS_File", "dbo");
            builder.HasKey(x => x.FileId).HasName("PK_CMS_Form").IsClustered();

            builder.Property(x => x.FileId).HasColumnName(@"FileId").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.FileName).HasColumnName(@"FileName").HasColumnType("nvarchar(100)").IsRequired().HasMaxLength(100);
            builder.Property(x => x.FileDescription).HasColumnName(@"FileDescription").HasColumnType("varchar(500)").IsRequired().IsUnicode(false).HasMaxLength(500);
            builder.Property(x => x.FileIdentifier).HasColumnName(@"FileIdentifier").HasColumnType("varchar(100)").IsRequired().IsUnicode(false).HasMaxLength(100);
            builder.Property(x => x.ValidStartDate).HasColumnName(@"ValidStartDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.ValidEndDate).HasColumnName(@"ValidEndDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType("bit").IsRequired();
            builder.HasMany<CmsTag>(t => t.CmsTags).WithMany(t => t.CmsFiles).UsingEntity<Dictionary<string, object>>("CMS_FileTag",
                    j => j.HasOne<CmsTag>().WithMany().HasForeignKey("TagId"),
                    j => j.HasOne<CmsFile>().WithMany().HasForeignKey("FileId"),
                    j => j.ToTable("CMS_FileTag", "dbo"));
        }
    }

    // CMS_Tag
    public class CmsTagConfiguration : IEntityTypeConfiguration<CmsTag>
    {
        public void Configure(EntityTypeBuilder<CmsTag> builder)
        {
            builder.ToTable("CMS_Tag", "dbo");
            builder.HasKey(x => x.TagId).HasName("PK_CMS_Tag").IsClustered();

            builder.Property(x => x.TagId).HasColumnName(@"TagId").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.TagName).HasColumnName(@"TagName").HasColumnType("varchar(100)").IsRequired().IsUnicode(false).HasMaxLength(100);
        }
    }

    // CODE_MeetingTopicDetails
    public class CodeMeetingTopicDetailConfiguration : IEntityTypeConfiguration<CodeMeetingTopicDetail>
    {
        public void Configure(EntityTypeBuilder<CodeMeetingTopicDetail> builder)
        {
            builder.ToTable("CODE_MeetingTopicDetails", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_CODE_MeetingTopicDetails").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.IdReuniao).HasColumnName(@"id_reuniao").HasColumnType("int").IsRequired();
            builder.Property(x => x.OrdTrab).HasColumnName(@"ord_trab").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Assunto).HasColumnName(@"assunto").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.Desenvolvimento).HasColumnName(@"desenvolvimento").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.Origem).HasColumnName(@"origem").HasColumnType("nvarchar(5)").IsRequired(false).HasMaxLength(5);
            builder.Property(x => x.IdOrigem).HasColumnName(@"id_origem").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Estado).HasColumnName(@"Estado").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CompanyId).HasColumnName(@"CompanyID").HasColumnType("int").IsRequired();
            builder.Property(x => x.DateCreated).HasColumnName(@"DateCreated").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.DateChanged).HasColumnName(@"DateChanged").HasColumnType("datetime").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.CodeParamMeetingTopicDetailSource).WithMany(b => b.CodeMeetingTopicDetails).HasPrincipalKey(p => p.Code).HasForeignKey(c => c.Origem).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_CODE_MeetingTopicDetails_CODE_PARAM_MeetingTopicDetailSource");

            builder.HasIndex(x => x.Origem).HasDatabaseName("IX_CODE_MeetingTopicDetails_origem");
        }
    }

    // CodeObject
    public class CodeObjectConfiguration : IEntityTypeConfiguration<CodeObject>
    {
        public void Configure(EntityTypeBuilder<CodeObject> builder)
        {
            builder.ToTable("CodeObject", "dbo");
            builder.HasKey(x => x.CodeObjectNo).HasName("aaaaaObject_PK").IsClustered();

            builder.Property(x => x.CodeObjectNo).HasColumnName(@"codeObjectNo").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.ApplicationNo).HasColumnName(@"applicationNo").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Type).HasColumnName(@"type").HasColumnType("int").IsRequired();
            builder.Property(x => x.EName).HasColumnName(@"eName").HasColumnType("nvarchar(250)").IsRequired().HasMaxLength(250);
            builder.Property(x => x.AName).HasColumnName(@"aName").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.Description).HasColumnName(@"description").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.CodeName).HasColumnName(@"codeName").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.Note).HasColumnName(@"note").HasColumnType("nvarchar(250)").IsRequired(false).HasMaxLength(250);
            builder.Property(x => x.IsObject).HasColumnName(@"isObject").HasColumnType("bit").IsRequired();
            builder.Property(x => x.VersionNumber).HasColumnName(@"versionNumber").HasColumnType("timestamp").IsRequired(false);
        }
    }

    // CODE_PARAM_MeetingTopicDetailSource
    public class CodeParamMeetingTopicDetailSourceConfiguration : IEntityTypeConfiguration<CodeParamMeetingTopicDetailSource>
    {
        public void Configure(EntityTypeBuilder<CodeParamMeetingTopicDetailSource> builder)
        {
            builder.ToTable("CODE_PARAM_MeetingTopicDetailSource", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_CODE_PARAM_MeetingTopicDetailSource").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Code).HasColumnName(@"Code").HasColumnType("nvarchar(5)").IsRequired().HasMaxLength(5);
            builder.Property(x => x.Label).HasColumnName(@"Label").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.LabelEng).HasColumnName(@"LabelENG").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.LabelEsp).HasColumnName(@"LabelESP").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.LabelFra).HasColumnName(@"LabelFRA").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.DateCreated).HasColumnName(@"DateCreated").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.DateChanged).HasColumnName(@"DateChanged").HasColumnType("datetime").IsRequired(false);

            builder.HasIndex(x => x.Code).HasDatabaseName("AK_CODE_PARAM_MeetingTopicDetailSource_Code").IsUnique();
            builder.HasIndex(x => x.Code).HasDatabaseName("UK_CODE_PARAM_MeetingTopicDetailSource").IsUnique();
        }
    }

    // Colour
    public class ColourConfiguration : IEntityTypeConfiguration<Colour>
    {
        public void Configure(EntityTypeBuilder<Colour> builder)
        {
            builder.ToTable("Colour", "dbo");
            builder.HasKey(x => x.Id).HasName("PK__Colour__3214EC07379EAA64").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.Name).HasColumnName(@"Name").HasColumnType("varchar(255)").IsRequired().IsUnicode(false).HasMaxLength(255);
        }
    }

    // Company
    public class CompanyConfiguration : IEntityTypeConfiguration<Company>
    {
        public void Configure(EntityTypeBuilder<Company> builder)
        {
            builder.ToTable("Company", "dbo");
            builder.HasKey(x => x.CoId).HasName("PK_Company").IsClustered();

            builder.Property(x => x.CoId).HasColumnName(@"coID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.CocogId).HasColumnName(@"cocogID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CocuId).HasColumnName(@"cocuID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CoName).HasColumnName(@"coName").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.CoShortName).HasColumnName(@"coShortName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.CoHtmlName).HasColumnName(@"coHtmlName").HasColumnType("nvarchar(1000)").IsRequired(false).HasMaxLength(1000);
            builder.Property(x => x.CoEmployerNo).HasColumnName(@"coEmployerNo").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.CoValidFrom).HasColumnName(@"coValidFrom").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.CoValidTo).HasColumnName(@"coValidTo").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.CoVatIdNo).HasColumnName(@"coVatIdNo").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.CoUrl).HasColumnName(@"coURL").HasColumnType("nvarchar(255)").IsRequired(false).HasMaxLength(255);
            builder.Property(x => x.CoActive).HasColumnName(@"coActive").HasColumnType("bit").IsRequired();

            // Foreign keys
            builder.HasOne(a => a.CompanyGroup).WithMany(b => b.Companies).HasForeignKey(c => c.CocogId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Company_CompanyGroup");

            builder.HasIndex(x => x.CocogId).HasDatabaseName("IX_Company_cocogID");
        }
    }

    // CompanyGroup
    public class CompanyGroupConfiguration : IEntityTypeConfiguration<CompanyGroup>
    {
        public void Configure(EntityTypeBuilder<CompanyGroup> builder)
        {
            builder.ToTable("CompanyGroup", "dbo");
            builder.HasKey(x => x.CogId).HasName("PK_CompanyGroup").IsClustered();

            builder.Property(x => x.CogId).HasColumnName(@"cogID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.CogCompanyGroupName).HasColumnName(@"cogCompanyGroupName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.CogValidFrom).HasColumnName(@"cogValidFrom").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.CogValidTo).HasColumnName(@"cogValidTo").HasColumnType("datetime").IsRequired(false);
        }
    }

    // Country
    public class CountryConfiguration : IEntityTypeConfiguration<Country>
    {
        public void Configure(EntityTypeBuilder<Country> builder)
        {
            builder.ToTable("Country", "dbo");
            builder.HasKey(x => x.CountryId).HasName("PK_Country").IsClustered();

            builder.Property(x => x.CountryId).HasColumnName(@"CountryID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Code).HasColumnName(@"Code").HasColumnType("varchar(12)").IsRequired(false).IsUnicode(false).HasMaxLength(12);
        }
    }

    // DateTimeDefaultTest
    public class DateTimeDefaultTestConfiguration : IEntityTypeConfiguration<DateTimeDefaultTest>
    {
        public void Configure(EntityTypeBuilder<DateTimeDefaultTest> builder)
        {
            builder.ToTable("DateTimeDefaultTest", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_DateTimeDefaultTest").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.CreatedDate).HasColumnName(@"CreatedDate").HasColumnType("datetimeoffset").IsRequired(false);
        }
    }

    // DboProcDataFromFfrsAndDboReturnModel
    public class DboProcDataFromFfrsAndDboReturnModelConfiguration : IEntityTypeConfiguration<DboProcDataFromFfrsAndDboReturnModel>
    {
        public void Configure(EntityTypeBuilder<DboProcDataFromFfrsAndDboReturnModel> builder)
        {
            builder.ToTable("DboProcDataFromFfrsAndDboReturnModel", "dbo");
            builder.HasKey(x => new { x.Id, x.PrimaryColourId });

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.PrimaryColourId).HasColumnName(@"PrimaryColourId").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.CarMake).HasColumnName(@"CarMake").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.CvName).HasColumnName(@"CVName").HasColumnType("nvarchar(max)").IsRequired(false);
        }
    }

    // DboProcDataFromFfrsReturnModel
    public class DboProcDataFromFfrsReturnModelConfiguration : IEntityTypeConfiguration<DboProcDataFromFfrsReturnModel>
    {
        public void Configure(EntityTypeBuilder<DboProcDataFromFfrsReturnModel> builder)
        {
            builder.ToTable("DboProcDataFromFfrsReturnModel", "dbo");
            builder.HasKey(x => new { x.BatchUid, x.Cvid });

            builder.Property(x => x.BatchUid).HasColumnName(@"BatchUID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.Cvid).HasColumnName(@"CVID").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.CvName).HasColumnName(@"CVName").HasColumnType("nvarchar(max)").IsRequired(false);
        }
    }

    // DefaultCheckForNull
    public class DefaultCheckForNullConfiguration : IEntityTypeConfiguration<DefaultCheckForNull>
    {
        public void Configure(EntityTypeBuilder<DefaultCheckForNull> builder)
        {
            builder.ToTable("DefaultCheckForNull", "dbo");
            builder.HasKey(x => x.Id).HasName("PK__DefaultC__3214EC0723541C72").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.DescUppercase).HasColumnName(@"DescUppercase").HasColumnType("varchar(5)").IsRequired(false).IsUnicode(false).HasMaxLength(5);
            builder.Property(x => x.DescLowercase).HasColumnName(@"DescLowercase").HasColumnType("varchar(5)").IsRequired(false).IsUnicode(false).HasMaxLength(5);
            builder.Property(x => x.DescMixedCase).HasColumnName(@"DescMixedCase").HasColumnType("varchar(5)").IsRequired(false).IsUnicode(false).HasMaxLength(5);
            builder.Property(x => x.DescBrackets).HasColumnName(@"DescBrackets").HasColumnType("varchar(5)").IsRequired(false).IsUnicode(false).HasMaxLength(5);
            builder.Property(x => x.X1).HasColumnName(@"X1").HasColumnType("varchar(255)").IsRequired(false).IsUnicode(false).HasMaxLength(255);
        }
    }

    // DSOpe
    public class DsOpeConfiguration : IEntityTypeConfiguration<DsOpe>
    {
        public void Configure(EntityTypeBuilder<DsOpe> builder)
        {
            builder.ToTable("DSOpe", "dbo");
            builder.HasKey(x => x.Id).HasName("PK__DSOpe__3214EC27150C693D").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.DecimalDefault).HasColumnName(@"decimal_default").HasColumnType("decimal(15,2)").HasPrecision(15,2).IsRequired();
            builder.Property(x => x.MyGuid).HasColumnName(@"MyGuid").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.@Default).HasColumnName(@"default").HasColumnType("varchar(10)").IsRequired(false).IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.MyGuidBadDefault).HasColumnName(@"MyGuidBadDefault").HasColumnType("uniqueidentifier").IsRequired(false);
        }
    }

    // DsOpeProcReturnModel
    public class DsOpeProcReturnModelConfiguration : IEntityTypeConfiguration<DsOpeProcReturnModel>
    {
        public void Configure(EntityTypeBuilder<DsOpeProcReturnModel> builder)
        {
            builder.ToTable("DsOpeProcReturnModel", "dbo");
            builder.HasKey(x => x.Id);

            builder.Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.Selected).HasColumnName(@"Selected").HasColumnType("bit").IsRequired(false);
        }
    }

    // EnumWithDefaultValue
    public class EnumWithDefaultValueConfiguration : IEntityTypeConfiguration<EnumWithDefaultValue>
    {
        public void Configure(EntityTypeBuilder<EnumWithDefaultValue> builder)
        {
            builder.ToTable("EnumWithDefaultValue", "dbo");
            builder.HasKey(x => x.Id).HasName("PK__EnumWith__3214EC07A2120E43").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.SomeEnum).HasColumnName(@"SomeEnum").HasColumnType("int").IsRequired();
        }
    }

    // EventProcessor
    public class EventProcessorConfiguration : IEntityTypeConfiguration<EventProcessor>
    {
        public void Configure(EntityTypeBuilder<EventProcessor> builder)
        {
            builder.ToTable("EventProcessor", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_EventProcessor").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Name).HasColumnName(@"Name").HasColumnType("varchar(200)").IsRequired().IsUnicode(false).HasMaxLength(200);
            builder.Property(x => x.Description).HasColumnName(@"Description").HasColumnType("varchar(512)").IsRequired(false).IsUnicode(false).HasMaxLength(512);
            builder.Property(x => x.EndpointAddress).HasColumnName(@"EndpointAddress").HasColumnType("varchar(512)").IsRequired(false).IsUnicode(false).HasMaxLength(512);
            builder.Property(x => x.Enabled).HasColumnName(@"Enabled").HasColumnType("bit").IsRequired();
        }
    }

    // EventProcessorEventFilter
    public class EventProcessorEventFilterConfiguration : IEntityTypeConfiguration<EventProcessorEventFilter>
    {
        public void Configure(EntityTypeBuilder<EventProcessorEventFilter> builder)
        {
            builder.ToTable("EventProcessorEventFilter", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_EventProcessorEventFilter").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.EventProcessorId).HasColumnName(@"EventProcessorId").HasColumnType("int").IsRequired();
            builder.Property(x => x.WantedEventId).HasColumnName(@"WantedEventId").HasColumnType("int").IsRequired();

            // Foreign keys
            builder.HasOne(a => a.EventProcessor).WithMany(b => b.EventProcessorEventFilters).HasForeignKey(c => c.EventProcessorId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_EventProcessorEventFilter__EventProcessor");

            builder.HasIndex(x => new { x.EventProcessorId, x.WantedEventId }).HasDatabaseName("IX_EventProcessorEventFilter").IsUnique();
        }
    }

    // CV
    public class FFRS_CvConfiguration : IEntityTypeConfiguration<FFRS_Cv>
    {
        public void Configure(EntityTypeBuilder<FFRS_Cv> builder)
        {
            builder.ToTable("CV", "FFRS");
            builder.HasKey(x => new { x.BatchUid, x.Cvid }).HasName("PK_CV").IsClustered();

            builder.Property(x => x.BatchUid).HasColumnName(@"BatchUID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.Cvid).HasColumnName(@"CVID").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.CvName).HasColumnName(@"CVName").HasColumnType("nvarchar(200)").IsRequired(false).HasMaxLength(200);
        }
    }

    // FFRS_CvDataReturnModel
    public class FfrsCvDataReturnModelConfiguration : IEntityTypeConfiguration<FfrsCvDataReturnModel>
    {
        public void Configure(EntityTypeBuilder<FfrsCvDataReturnModel> builder)
        {
            builder.ToTable("FFRS_CvDataReturnModel", "dbo");
            builder.HasKey(x => new { x.BatchUid, x.Cvid });

            builder.Property(x => x.BatchUid).HasColumnName(@"BatchUID").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.Cvid).HasColumnName(@"CVID").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.CvName).HasColumnName(@"CVName").HasColumnType("nvarchar(max)").IsRequired(false);
        }
    }

    // FFRS_DataFromDboAndFfrsReturnModel
    public class FfrsDataFromDboAndFfrsReturnModelConfiguration : IEntityTypeConfiguration<FfrsDataFromDboAndFfrsReturnModel>
    {
        public void Configure(EntityTypeBuilder<FfrsDataFromDboAndFfrsReturnModel> builder)
        {
            builder.ToTable("FFRS_DataFromDboAndFfrsReturnModel", "dbo");
            builder.HasKey(x => new { x.Id, x.PrimaryColourId });

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.PrimaryColourId).HasColumnName(@"PrimaryColourId").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.CarMake).HasColumnName(@"CarMake").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.CvName).HasColumnName(@"CVName").HasColumnType("nvarchar(max)").IsRequired(false);
        }
    }

    // FFRS_DataFromDboReturnModel
    public class FfrsDataFromDboReturnModelConfiguration : IEntityTypeConfiguration<FfrsDataFromDboReturnModel>
    {
        public void Configure(EntityTypeBuilder<FfrsDataFromDboReturnModel> builder)
        {
            builder.ToTable("FFRS_DataFromDboReturnModel", "dbo");
            builder.HasKey(x => new { x.Id, x.PrimaryColourId });

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.PrimaryColourId).HasColumnName(@"PrimaryColourId").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.CarMake).HasColumnName(@"CarMake").HasColumnType("nvarchar(max)").IsRequired(false);
        }
    }

    // FinancialInstitutionOffice
    public class FinancialInstitutionOfficeConfiguration : IEntityTypeConfiguration<FinancialInstitutionOffice>
    {
        public void Configure(EntityTypeBuilder<FinancialInstitutionOffice> builder)
        {
            builder.ToTable("FinancialInstitutionOffice", "dbo");
            builder.HasKey(x => x.FinancialInstitutionCode).HasName("PK_FinancialInstitutionOffice").IsClustered();

            builder.Property(x => x.FinancialInstitutionCode).HasColumnName(@"FinancialInstitutionCode").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.Code).HasColumnName(@"Code").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.OfficeName).HasColumnName(@"OfficeName").HasColumnType("nvarchar(200)").IsRequired(false).HasMaxLength(200);

            builder.HasIndex(x => new { x.FinancialInstitutionCode, x.OfficeName }).HasDatabaseName("UniqueOfficeName_FinancialInstitutionOffice").IsUnique();
        }
    }

    // footer
    public class FooterConfiguration : IEntityTypeConfiguration<Footer>
    {
        public void Configure(EntityTypeBuilder<Footer> builder)
        {
            builder.ToTable("footer", "dbo");
            builder.HasKey(x => x.Id).HasName("PK__footer__3214EC272B429812").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.OtherId).HasColumnName(@"otherID").HasColumnType("int").IsRequired();
            builder.Property(x => x.Added).HasColumnName(@"added").HasColumnType("datetime").IsRequired();

            // Foreign keys
            builder.HasOne(a => a.Header).WithMany(b => b.Footers).HasForeignKey(c => new { c.Id, c.OtherId }).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("fooderFK");

            builder.HasIndex(x => new { x.Id, x.OtherId }).HasDatabaseName("IX_footer_ID_otherID");
        }
    }

    // ForeignKeyIsNotEnforced
    public class ForeignKeyIsNotEnforcedConfiguration : IEntityTypeConfiguration<ForeignKeyIsNotEnforced>
    {
        public void Configure(EntityTypeBuilder<ForeignKeyIsNotEnforced> builder)
        {
            builder.ToTable("ForeignKeyIsNotEnforced", "dbo");
            builder.HasKey(x => x.Id).HasName("PK__ForeignK__3213E83F7A9FD04F").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.NullValue).HasColumnName(@"null_value").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.NotNullValue).HasColumnName(@"not_null_value").HasColumnType("int").IsRequired();

            builder.HasIndex(x => x.NotNullValue).HasDatabaseName("AK_ForeignKeyIsNotEnforced_not_null_value").IsUnique();
            builder.HasIndex(x => x.NotNullValue).HasDatabaseName("UQ_ForeignKeyIsNotEnforced_not_null_value").IsUnique();
            builder.HasIndex(x => x.NullValue).HasDatabaseName("UQ_ForeignKeyIsNotEnforced_null_value").IsUnique();
        }
    }

    // ForeignKeyIsNotEnforcedItem
    public class ForeignKeyIsNotEnforcedItemConfiguration : IEntityTypeConfiguration<ForeignKeyIsNotEnforcedItem>
    {
        public void Configure(EntityTypeBuilder<ForeignKeyIsNotEnforcedItem> builder)
        {
            builder.ToTable("ForeignKeyIsNotEnforcedItem", "dbo");
            builder.HasKey(x => x.Id).HasName("PK__ForeignK__3213E83FB7C5760B").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.NullValue).HasColumnName(@"null_value").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.NotNullValue).HasColumnName(@"not_null_value").HasColumnType("int").IsRequired();

            // Foreign keys
            builder.HasOne(a => a.ForeignKeyIsNotEnforced_NotNullValue).WithMany(b => b.ForeignKeyIsNotEnforcedItems_NotNullValue).HasPrincipalKey(p => p.NotNullValue).HasForeignKey(c => c.NotNullValue).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_ForeignKeyIsNotEnforcedItem_notnull_notnull");
            builder.HasOne(a => a.ForeignKeyIsNotEnforced_NullValue).WithMany(b => b.ForeignKeyIsNotEnforcedItems_NullValue).HasPrincipalKey(p => p.NotNullValue).HasForeignKey(c => c.NullValue).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_ForeignKeyIsNotEnforcedItem_null_notnull");

            builder.HasIndex(x => x.NotNullValue).HasDatabaseName("UQ_ForeignKeyIsNotEnforcedItem_not_null_value").IsUnique();
            builder.HasIndex(x => x.NullValue).HasDatabaseName("UQ_ForeignKeyIsNotEnforcedItem_null_value").IsUnique();
        }
    }

    // GetScreamAndShoutReturnModel
    public class GetScreamAndShoutReturnModelConfiguration : IEntityTypeConfiguration<GetScreamAndShoutReturnModel>
    {
        public void Configure(EntityTypeBuilder<GetScreamAndShoutReturnModel> builder)
        {
            builder.ToTable("GetScreamAndShoutReturnModel", "dbo");
            builder.HasKey(x => x.Id);

            builder.Property(x => x.Id).HasColumnName(@"id").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.KoeffVed).HasColumnName(@"KoeffVed").HasColumnType("decimal(18,2)").HasPrecision(18,2).IsRequired(false);
        }
    }

    // HasPrincipalKeyTestChild
    public class HasPrincipalKeyTestChildConfiguration : IEntityTypeConfiguration<HasPrincipalKeyTestChild>
    {
        public void Configure(EntityTypeBuilder<HasPrincipalKeyTestChild> builder)
        {
            builder.ToTable("HasPrincipalKeyTestChild", "dbo");
            builder.HasKey(x => x.Id).HasName("PK__HasPrinc__3214EC07061FCDAA").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.A).HasColumnName(@"A").HasColumnType("int").IsRequired();
            builder.Property(x => x.B).HasColumnName(@"B").HasColumnType("int").IsRequired();
            builder.Property(x => x.C).HasColumnName(@"C").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.D).HasColumnName(@"D").HasColumnType("int").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.HasPrincipalKeyTestParent).WithOne(b => b.HasPrincipalKeyTestChild).HasPrincipalKey<HasPrincipalKeyTestParent>(p => new { p.A, p.B }).HasForeignKey<HasPrincipalKeyTestChild>(c => new { c.A, c.B }).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_HasPrincipalKey_AB");

            builder.HasIndex(x => new { x.A, x.B }).HasDatabaseName("IX_HasPrincipalKeyTestChild_A_B").IsUnique();
        }
    }

    // HasPrincipalKeyTestParent
    public class HasPrincipalKeyTestParentConfiguration : IEntityTypeConfiguration<HasPrincipalKeyTestParent>
    {
        public void Configure(EntityTypeBuilder<HasPrincipalKeyTestParent> builder)
        {
            builder.ToTable("HasPrincipalKeyTestParent", "dbo");
            builder.HasKey(x => x.Id).HasName("PK__HasPrinc__3214EC07C4D24B68").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.A).HasColumnName(@"A").HasColumnType("int").IsRequired();
            builder.Property(x => x.B).HasColumnName(@"B").HasColumnType("int").IsRequired();
            builder.Property(x => x.C).HasColumnName(@"C").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.D).HasColumnName(@"D").HasColumnType("int").IsRequired(false);

            builder.HasIndex(x => new { x.A, x.B }).HasDatabaseName("AK_HasPrincipalKeyTestParent_A_B").IsUnique();
            builder.HasIndex(x => new { x.A, x.B }).HasDatabaseName("UQ_HasPrincipalKeyTestParent_AB").IsUnique();
            builder.HasIndex(x => new { x.A, x.C }).HasDatabaseName("UQ_HasPrincipalKeyTestParent_AC").IsUnique();
            builder.HasIndex(x => new { x.C, x.D }).HasDatabaseName("UQ_HasPrincipalKeyTestParent_CD").IsUnique();
        }
    }

    // header
    public class HeaderConfiguration : IEntityTypeConfiguration<Header>
    {
        public void Configure(EntityTypeBuilder<Header> builder)
        {
            builder.ToTable("header", "dbo");
            builder.HasKey(x => new { x.Id, x.AnotherId }).HasName("PK__header__FAB049E7232129AF").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.AnotherId).HasColumnName(@"anotherID").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.Added).HasColumnName(@"added").HasColumnType("datetime").IsRequired();
        }
    }

    // hierarchy_test
    public class HierarchyTestConfiguration : IEntityTypeConfiguration<HierarchyTest>
    {
        public void Configure(EntityTypeBuilder<HierarchyTest> builder)
        {
            builder.ToTable("hierarchy_test", "dbo");
            builder.HasKey(x => x.Id).HasName("PK__hierarch__3214EC27A00D9B63").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Hid).HasColumnName(@"hid").HasColumnType("hierarchyid").IsRequired();
        }
    }

    // Role
    public class Issue47_RoleConfiguration : IEntityTypeConfiguration<Issue47_Role>
    {
        public void Configure(EntityTypeBuilder<Issue47_Role> builder)
        {
            builder.ToTable("Role", "Issue47");
            builder.HasKey(x => x.RoleId).HasName("PK__Role__8AFACE1A223A2B5D").IsClustered();

            builder.Property(x => x.RoleId).HasColumnName(@"RoleId").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Role).HasColumnName(@"Role").HasColumnType("varchar(10)").IsRequired(false).IsUnicode(false).HasMaxLength(10);
        }
    }

    // Users
    public class Issue47_UserConfiguration : IEntityTypeConfiguration<Issue47_User>
    {
        public void Configure(EntityTypeBuilder<Issue47_User> builder)
        {
            builder.ToTable("Users", "Issue47");
            builder.HasKey(x => x.UserId).HasName("PK__Users__1788CC4CFC98EC84").IsClustered();

            builder.Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Name).HasColumnName(@"Name").HasColumnType("varchar(10)").IsRequired(false).IsUnicode(false).HasMaxLength(10);
        }
    }

    // UserRoles
    public class Issue47_UserRoleConfiguration : IEntityTypeConfiguration<Issue47_UserRole>
    {
        public void Configure(EntityTypeBuilder<Issue47_UserRole> builder)
        {
            builder.ToTable("UserRoles", "Issue47");
            builder.HasKey(x => x.UserRoleId).HasName("PK__UserRole__3D978A3528CA58C0").IsClustered();

            builder.Property(x => x.UserRoleId).HasColumnName(@"UserRoleId").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("int").IsRequired();
            builder.Property(x => x.RoleId).HasColumnName(@"RoleId").HasColumnType("int").IsRequired();

            // Foreign keys
            builder.HasOne(a => a.Issue47_Role).WithMany(b => b.Issue47_UserRoles).HasForeignKey(c => c.RoleId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("Issue47_UserRoles_roleid");
            builder.HasOne(a => a.Issue47_User).WithMany(b => b.Issue47_UserRoles).HasForeignKey(c => c.UserId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("Issue47_UserRoles_userid");

            builder.HasIndex(x => x.RoleId).HasDatabaseName("IX_UserRoles_RoleId");
            builder.HasIndex(x => x.UserId).HasDatabaseName("IX_UserRoles_UserId");
        }
    }

    // ScreamAndShout
    public class Kate_ScreamAndShoutConfiguration : IEntityTypeConfiguration<Kate_ScreamAndShout>
    {
        public void Configure(EntityTypeBuilder<Kate_ScreamAndShout> builder)
        {
            builder.ToTable("ScreamAndShout", "Kate");
            builder.HasKey(x => x.KateId).HasName("PK__ScreamAn__8540EE1FFC54DDC8").IsClustered();

            builder.Property(x => x.KateId).HasColumnName(@"KateID").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.Description).HasColumnName(@"description").HasColumnType("varchar(20)").IsRequired().IsUnicode(false).HasMaxLength(20);

            // Foreign keys
            builder.HasOne(a => a.ScreamAndShout).WithOne(b => b.Kate_ScreamAndShout).HasForeignKey<Kate_ScreamAndShout>(c => c.KateId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("KateFK");
        }
    }

    // MultipleKeys
    public class MultipleKeyConfiguration : IEntityTypeConfiguration<MultipleKey>
    {
        public void Configure(EntityTypeBuilder<MultipleKey> builder)
        {
            builder.ToTable("MultipleKeys", "dbo");
            builder.HasKey(x => new { x.UserId, x.FavouriteColourId, x.BestHolidayTypeId }).HasName("PK_MultipleKeys").IsClustered();

            builder.Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.FavouriteColourId).HasColumnName(@"FavouriteColourId").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.BestHolidayTypeId).HasColumnName(@"BestHolidayTypeId").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.BankId).HasColumnName(@"BankId").HasColumnType("int").IsRequired();
            builder.Property(x => x.CarId).HasColumnName(@"CarId").HasColumnType("int").IsRequired();

            builder.HasIndex(x => x.BestHolidayTypeId).HasDatabaseName("IX_MultipleKeys_BestHolidayType");
            builder.HasIndex(x => new { x.BestHolidayTypeId, x.BankId }).HasDatabaseName("IX_MultipleKeys_Holiday_Bank").IsUnique();
            builder.HasIndex(x => x.FavouriteColourId).HasDatabaseName("UC_MultipleKeys_FavouriteColour").IsUnique();
        }
    }

    // Issue
    public class OneEightSix_IssueConfiguration : IEntityTypeConfiguration<OneEightSix_Issue>
    {
        public void Configure(EntityTypeBuilder<OneEightSix_Issue> builder)
        {
            builder.ToTable("Issue", "OneEightSix");
            builder.HasKey(x => x.Id).HasName("PK_Issue").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Title).HasColumnName(@"Title").HasColumnType("nvarchar(100)").IsRequired().HasMaxLength(100);
            builder.Property(x => x.Content).HasColumnName(@"Content").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.ConsentDocumentId).HasColumnName(@"ConsentDocumentId").HasColumnType("int").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.OneEightSix_UploadedFile).WithMany(b => b.OneEightSix_Issues_ConsentDocumentId).HasForeignKey(c => c.ConsentDocumentId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Issue_UploadedFileConsentDocument");
            builder.HasMany<OneEightSix_UploadedFile>(t => t.OneEightSix_UploadedFiles).WithMany(t => t.OneEightSix_Issues_IssueId).UsingEntity<Dictionary<string, object>>("IssueUploadedFile",
                    j => j.HasOne<OneEightSix_UploadedFile>().WithMany().HasForeignKey("UploadedFileId"),
                    j => j.HasOne<OneEightSix_Issue>().WithMany().HasForeignKey("IssueId"),
                    j => j.ToTable("IssueUploadedFile", "OneEightSix"));

            builder.HasIndex(x => x.ConsentDocumentId).HasDatabaseName("IX_Issue_ConsentDocumentId");
        }
    }

    // UploadedFile
    public class OneEightSix_UploadedFileConfiguration : IEntityTypeConfiguration<OneEightSix_UploadedFile>
    {
        public void Configure(EntityTypeBuilder<OneEightSix_UploadedFile> builder)
        {
            builder.ToTable("UploadedFile", "OneEightSix");
            builder.HasKey(x => x.Id).HasName("PK_UploadedFile").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.FullPath).HasColumnName(@"FullPath").HasColumnType("nvarchar(max)").IsRequired();
        }
    }

    // PeriodTestTable
    public class PeriodTestTableConfiguration : IEntityTypeConfiguration<PeriodTestTable>
    {
        public void Configure(EntityTypeBuilder<PeriodTestTable> builder)
        {
            builder.ToTable("PeriodTestTable", "dbo");
            builder.HasKey(x => x.Id).HasName("PK__PeriodTe__3213E83F590BD2DE").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"id").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.Joe46Bloggs).HasColumnName(@"joe.bloggs").HasColumnType("int").IsRequired(false);
        }
    }

    // Person
    public class PersonConfiguration : IEntityTypeConfiguration<Person>
    {
        public void Configure(EntityTypeBuilder<Person> builder)
        {
            builder.ToTable("Person", "dbo");
            builder.HasKey(x => x.Id).HasName("PK__Person__3214EC07424FC866").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Name).HasColumnName(@"Name").HasColumnType("varchar(50)").IsRequired().IsUnicode(false).HasMaxLength(50);
        }
    }

    // PersonPosts
    public class PersonPostConfiguration : IEntityTypeConfiguration<PersonPost>
    {
        public void Configure(EntityTypeBuilder<PersonPost> builder)
        {
            builder.ToTable("PersonPosts", "dbo");
            builder.HasKey(x => x.Id).HasName("PK__PersonPo__3214EC0714F40FA4").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Title).HasColumnName(@"Title").HasColumnType("varchar(20)").IsRequired().IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.Body).HasColumnName(@"Body").HasColumnType("varchar(100)").IsRequired().IsUnicode(false).HasMaxLength(100);
            builder.Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("int").IsRequired();
            builder.Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("int").IsRequired();

            // Foreign keys
            builder.HasOne(a => a.Person_CreatedBy).WithMany(b => b.PersonPosts_CreatedBy).HasForeignKey(c => c.CreatedBy).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_PersonPosts_CreatedBy");
            builder.HasOne(a => a.Person_UpdatedBy).WithMany(b => b.PersonPosts_UpdatedBy).HasForeignKey(c => c.UpdatedBy).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_PersonPosts_UpdatedBy");

            builder.HasIndex(x => x.CreatedBy).HasDatabaseName("IX_PersonPosts_CreatedBy");
            builder.HasIndex(x => x.UpdatedBy).HasDatabaseName("IX_PersonPosts_UpdatedBy");
        }
    }

    // pk_ordinal_test
    public class PkOrdinalTestConfiguration : IEntityTypeConfiguration<PkOrdinalTest>
    {
        public void Configure(EntityTypeBuilder<PkOrdinalTest> builder)
        {
            builder.ToTable("pk_ordinal_test", "dbo");
            builder.HasKey(x => new { x.C3, x.C1 }).HasName("PK__pk_ordin__1135D3B4AF17DB21").IsClustered();

            builder.Property(x => x.C1).HasColumnName(@"C1").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.C3).HasColumnName(@"C3").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.C2).HasColumnName(@"C2").HasColumnType("int").IsRequired();
        }
    }

    // PropertyTypesToAdd
    public class PropertyTypesToAddConfiguration : IEntityTypeConfiguration<PropertyTypesToAdd>
    {
        public void Configure(EntityTypeBuilder<PropertyTypesToAdd> builder)
        {
            builder.ToTable("PropertyTypesToAdd", "dbo");
            builder.HasKey(x => x.Id).HasName("PK__Property__3213E83FCECB1764").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"id").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.DtDefault).HasColumnName(@"dt_default").HasColumnType("datetime2").IsRequired(false);
            builder.Property(x => x.Dt7).HasColumnName(@"dt7").HasColumnType("datetime2").IsRequired(false);
            builder.Property(x => x.DefaultCheck).HasColumnName(@"defaultCheck").HasColumnType("varchar(10)").IsRequired(false).IsUnicode(false).HasMaxLength(10);
        }
    }

    // RebelGalaxyBroadsides
    public class RebelGalaxyBroadsideConfiguration : IEntityTypeConfiguration<RebelGalaxyBroadside>
    {
        public void Configure(EntityTypeBuilder<RebelGalaxyBroadside> builder)
        {
            builder.ToTable("RebelGalaxyBroadsides", "dbo");
            builder.HasKey(x => new { x.Damage, x.Cost }).HasName("PK_RebelGalaxyBroadsides").IsClustered();

            builder.Property(x => x.Damage).HasColumnName(@"Damage").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.Cost).HasColumnName(@"Cost").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.WeaponName).HasColumnName(@"WeaponName").HasColumnType("varchar(30)").IsRequired(false).IsUnicode(false).HasMaxLength(30);
        }
    }

    // RebelGalaxyShips
    public class RebelGalaxyShipConfiguration : IEntityTypeConfiguration<RebelGalaxyShip>
    {
        public void Configure(EntityTypeBuilder<RebelGalaxyShip> builder)
        {
            builder.ToTable("RebelGalaxyShips", "dbo");
            builder.HasKey(x => new { x.Broadsides, x.Turrets, x.Cost }).HasName("PK_RebelGalaxyShips").IsClustered();

            builder.Property(x => x.Broadsides).HasColumnName(@"Broadsides").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.Turrets).HasColumnName(@"Turrets").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.Cost).HasColumnName(@"Cost").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.ShipName).HasColumnName(@"ShipName").HasColumnType("varchar(30)").IsRequired(false).IsUnicode(false).HasMaxLength(30);
        }
    }

    // RebelGalaxyWeapons
    public class RebelGalaxyWeaponConfiguration : IEntityTypeConfiguration<RebelGalaxyWeapon>
    {
        public void Configure(EntityTypeBuilder<RebelGalaxyWeapon> builder)
        {
            builder.ToTable("RebelGalaxyWeapons", "dbo");
            builder.HasKey(x => new { x.Damage, x.Cost }).HasName("PK_RebelGalaxyWeapons").IsClustered();

            builder.Property(x => x.Damage).HasColumnName(@"Damage").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.Cost).HasColumnName(@"Cost").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.WeaponName).HasColumnName(@"WeaponName").HasColumnType("varchar(30)").IsRequired(false).IsUnicode(false).HasMaxLength(30);
        }
    }

    // ScreamAndShout
    public class ScreamAndShoutConfiguration : IEntityTypeConfiguration<ScreamAndShout>
    {
        public void Configure(EntityTypeBuilder<ScreamAndShout> builder)
        {
            builder.ToTable("ScreamAndShout", "dbo");
            builder.HasKey(x => x.Id).HasName("PK__ScreamAn__3213E83F55C3020B").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"id").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.KoeffVed).HasColumnName(@"KoeffVed").HasColumnType("decimal(4,4)").HasPrecision(4,4).IsRequired(false);
        }
    }

    // SequenceTest
    public class SequenceTestConfiguration : IEntityTypeConfiguration<SequenceTest>
    {
        public void Configure(EntityTypeBuilder<SequenceTest> builder)
        {
            builder.ToTable("SequenceTest", "dbo");
            builder.HasKey(x => x.Id).HasName("PK__Sequence__3214EC072BABC879").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDefaultValueSql(@"NEXT VALUE FOR [dbo].[CountBy1]");
            builder.Property(x => x.CntByBigInt).HasColumnName(@"CntByBigInt").HasColumnType("bigint").IsRequired().HasDefaultValueSql(@"NEXT VALUE FOR [dbo].[CountByBigInt]");
            builder.Property(x => x.CntByTinyInt).HasColumnName(@"CntByTinyInt").HasColumnType("tinyint").IsRequired().HasDefaultValueSql(@"NEXT VALUE FOR [dbo].[CountByTinyInt]");
            builder.Property(x => x.CntBySmallInt).HasColumnName(@"CntBySmallInt").HasColumnType("smallint").IsRequired().HasDefaultValueSql(@"NEXT VALUE FOR [dbo].[CountBySmallInt]");
            builder.Property(x => x.CntByDecimal).HasColumnName(@"CntByDecimal").HasColumnType("decimal(18,0)").HasPrecision(18,0).IsRequired().HasDefaultValueSql(@"NEXT VALUE FOR [dbo].[CountByDecimal]");
            builder.Property(x => x.CntByNumeric).HasColumnName(@"CntByNumeric").HasColumnType("numeric(18,0)").HasPrecision(18,0).IsRequired().HasDefaultValueSql(@"NEXT VALUE FOR [dbo].[CountByNumeric]");
        }
    }

    // SpatialTypesNoParamsReturnModel
    public class SpatialTypesNoParamsReturnModelConfiguration : IEntityTypeConfiguration<SpatialTypesNoParamsReturnModel>
    {
        public void Configure(EntityTypeBuilder<SpatialTypesNoParamsReturnModel> builder)
        {
            builder.ToTable("SpatialTypesNoParamsReturnModel", "dbo");
            builder.HasKey(x => new { x.Dollar, x.SomeDate });

            builder.Property(x => x.Dollar).HasColumnName(@"Dollar").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.SomeDate).HasColumnName(@"someDate").HasColumnType("datetime2").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.GeographyType).HasColumnName(@"GeographyType").HasColumnType("geography").IsRequired(false);
            builder.Property(x => x.GeometryType).HasColumnName(@"GeometryType").HasColumnType("geometry").IsRequired(false);
        }
    }

    // StockPrediction
    public class StockPredictionConfiguration : IEntityTypeConfiguration<StockPrediction>
    {
        public void Configure(EntityTypeBuilder<StockPrediction> builder)
        {
            builder.ToTable("StockPrediction", "dbo");
            builder.HasKey(x => x.Id).HasName("PK__StockPre__3213E83FFBA52754").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Name).HasColumnName(@"name").HasColumnType("varchar(50)").IsRequired().IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.Date).HasColumnName(@"date").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.Open).HasColumnName(@"open").HasColumnType("decimal(10,4)").HasPrecision(10,4).IsRequired();
            builder.Property(x => x.High).HasColumnName(@"high").HasColumnType("decimal(10,4)").HasPrecision(10,4).IsRequired();
            builder.Property(x => x.Low).HasColumnName(@"low").HasColumnType("decimal(10,4)").HasPrecision(10,4).IsRequired();
            builder.Property(x => x.Close).HasColumnName(@"close").HasColumnType("decimal(10,4)").HasPrecision(10,4).IsRequired();
            builder.Property(x => x.AdjClose).HasColumnName(@"adj_close").HasColumnType("decimal(10,4)").HasPrecision(10,4).IsRequired();
            builder.Property(x => x.Volume).HasColumnName(@"volume").HasColumnType("int").IsRequired();
            builder.Property(x => x.Buy).HasColumnName(@"buy").HasColumnType("bit").IsRequired(false);
        }
    }

    // StpNoParamsTestReturnModel
    public class StpNoParamsTestReturnModelConfiguration : IEntityTypeConfiguration<StpNoParamsTestReturnModel>
    {
        public void Configure(EntityTypeBuilder<StpNoParamsTestReturnModel> builder)
        {
            builder.ToTable("StpNoParamsTestReturnModel", "dbo");
            builder.HasKey(x => x.CodeObjectNo);

            builder.Property(x => x.CodeObjectNo).HasColumnName(@"codeObjectNo").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.ApplicationNo).HasColumnName(@"applicationNo").HasColumnType("int").IsRequired(false);
        }
    }

    // StpNullableParamsTestReturnModel
    public class StpNullableParamsTestReturnModelConfiguration : IEntityTypeConfiguration<StpNullableParamsTestReturnModel>
    {
        public void Configure(EntityTypeBuilder<StpNullableParamsTestReturnModel> builder)
        {
            builder.ToTable("StpNullableParamsTestReturnModel", "dbo");
            builder.HasKey(x => x.CodeObjectNo);

            builder.Property(x => x.CodeObjectNo).HasColumnName(@"codeObjectNo").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.ApplicationNo).HasColumnName(@"applicationNo").HasColumnType("int").IsRequired(false);
        }
    }

    // StpTestReturnModel
    public class StpTestReturnModelConfiguration : IEntityTypeConfiguration<StpTestReturnModel>
    {
        public void Configure(EntityTypeBuilder<StpTestReturnModel> builder)
        {
            builder.ToTable("StpTestReturnModel", "dbo");
            builder.HasKey(x => new { x.CodeObjectNo, x.Type, x.IsObject });

            builder.Property(x => x.CodeObjectNo).HasColumnName(@"codeObjectNo").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.ApplicationNo).HasColumnName(@"applicationNo").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Type).HasColumnName(@"type").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.EName).HasColumnName(@"eName").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.AName).HasColumnName(@"aName").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.Description).HasColumnName(@"description").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.CodeName).HasColumnName(@"codeName").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.Note).HasColumnName(@"note").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.IsObject).HasColumnName(@"isObject").HasColumnType("bit").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.VersionNumber).HasColumnName(@"versionNumber").HasColumnType("varbinary(max)").IsRequired(false);
        }
    }

    // StpTestUnderscoreTestReturnModel
    public class StpTestUnderscoreTestReturnModelConfiguration : IEntityTypeConfiguration<StpTestUnderscoreTestReturnModel>
    {
        public void Configure(EntityTypeBuilder<StpTestUnderscoreTestReturnModel> builder)
        {
            builder.ToTable("StpTestUnderscoreTestReturnModel", "dbo");
            builder.HasKey(x => x.CodeObjectNo);

            builder.Property(x => x.CodeObjectNo).HasColumnName(@"code_object_no").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.ApplicationNo).HasColumnName(@"application_no").HasColumnType("int").IsRequired(false);
        }
    }

    // TableA
    public class TableAConfiguration : IEntityTypeConfiguration<TableA>
    {
        public void Configure(EntityTypeBuilder<TableA> builder)
        {
            builder.ToTable("TableA", "dbo");
            builder.HasKey(x => x.TableAId).HasName("TableA_pkey").IsClustered();

            builder.Property(x => x.TableAId).HasColumnName(@"TableAId").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.TableADesc).HasColumnName(@"TableADesc").HasColumnType("varchar(20)").IsRequired(false).IsUnicode(false).HasMaxLength(20);
        }
    }

    // TableB
    public class TableBConfiguration : IEntityTypeConfiguration<TableB>
    {
        public void Configure(EntityTypeBuilder<TableB> builder)
        {
            builder.ToTable("TableB", "dbo");
            builder.HasKey(x => new { x.TableBId, x.TableAId }).HasName("TableB_pkey").IsClustered();

            builder.Property(x => x.TableBId).HasColumnName(@"TableBId").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.TableAId).HasColumnName(@"TableAId").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.ParentTableAId).HasColumnName(@"ParentTableAId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.TableBDesc).HasColumnName(@"TableBDesc").HasColumnType("varchar(20)").IsRequired(false).IsUnicode(false).HasMaxLength(20);

            // Foreign keys
            builder.HasOne(a => a.TableA_TableAId).WithMany(b => b.TableBs).HasForeignKey(c => c.TableAId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_TableA_CompositeKey_Req");
            builder.HasOne(a => a.TableB1).WithOne(b => b.TableB2).HasForeignKey<TableB>(c => new { c.TableAId, c.TableBId }).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("ParentTableB_Hierarchy");

            builder.HasIndex(x => x.TableAId).HasDatabaseName("fki_ParentTableA_FK_Constraint");
            builder.HasIndex(x => new { x.TableAId, x.TableBId }).HasDatabaseName("IX_TableB_TableAId_TableBId").IsUnique();
        }
    }

    // table with duplicate column names
    public class TableWithDuplicateColumnNameConfiguration : IEntityTypeConfiguration<TableWithDuplicateColumnName>
    {
        public void Configure(EntityTypeBuilder<TableWithDuplicateColumnName> builder)
        {
            builder.ToTable("table with duplicate column names", "dbo");
            builder.HasKey(x => x.Id).HasName("PK__table wi__3213E83F7E62FED9").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.UserId1).HasColumnName(@"user_id").HasColumnType("int").IsRequired();
            builder.Property(x => x.UserId2).HasColumnName(@"UserId").HasColumnType("int").IsRequired();
            builder.Property(x => x.UserId3).HasColumnName(@"User Id").HasColumnType("int").IsRequired();
            builder.Property(x => x.UserId4).HasColumnName(@"User  Id").HasColumnType("int").IsRequired();
            builder.Property(x => x.UserId).HasColumnName(@"user__id").HasColumnType("int").IsRequired();
        }
    }

    // table with space
    public class TableWithSpaceConfiguration : IEntityTypeConfiguration<TableWithSpace>
    {
        public void Configure(EntityTypeBuilder<TableWithSpace> builder)
        {
            builder.ToTable("table with space", "dbo");
            builder.HasKey(x => x.Id).HasName("PK__table wi__3213E83F6330D784").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"id").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.HasMany<TableWithSpaceAndInColumn>(t => t.TableWithSpaceAndInColumns).WithMany(t => t.TableWithSpaces).UsingEntity<Dictionary<string, object>>("table mapping with space",
                    j => j.HasOne<TableWithSpaceAndInColumn>().WithMany().HasForeignKey("id value"),
                    j => j.HasOne<TableWithSpace>().WithMany().HasForeignKey("id"),
                    j => j.ToTable("table mapping with space", "dbo"));
        }
    }

    // table with space and in columns
    public class TableWithSpaceAndInColumnConfiguration : IEntityTypeConfiguration<TableWithSpaceAndInColumn>
    {
        public void Configure(EntityTypeBuilder<TableWithSpaceAndInColumn> builder)
        {
            builder.ToTable("table with space and in columns", "dbo");
            builder.HasKey(x => x.IdValue).HasName("PK__table wi__92CF061C44B1B06D").IsClustered();

            builder.Property(x => x.IdValue).HasColumnName(@"id value").HasColumnType("int").IsRequired().ValueGeneratedNever();
        }
    }

    // TableWithSpaceInColumnOnly
    public class TableWithSpaceInColumnOnlyConfiguration : IEntityTypeConfiguration<TableWithSpaceInColumnOnly>
    {
        public void Configure(EntityTypeBuilder<TableWithSpaceInColumnOnly> builder)
        {
            builder.ToTable("TableWithSpaceInColumnOnly", "dbo");
            builder.HasKey(x => x.IdValue).HasName("PK__TableWit__92CF061C3D75F56A").IsClustered();

            builder.Property(x => x.IdValue).HasColumnName(@"id value").HasColumnType("int").IsRequired().ValueGeneratedNever();
        }
    }

    // TadeuszSobol
    public class TadeuszSobolConfiguration : IEntityTypeConfiguration<TadeuszSobol>
    {
        public void Configure(EntityTypeBuilder<TadeuszSobol> builder)
        {
            builder.ToTable("TadeuszSobol", "dbo");
            builder.HasKey(x => x.Id).HasName("PK__TadeuszS__3214EC07437DCB5A").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Description).HasColumnName(@"Description").HasColumnType("varchar(max)").IsRequired(false).IsUnicode(false);
            builder.Property(x => x.Notes).HasColumnName(@"Notes").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.Name).HasColumnName(@"Name").HasColumnType("varchar(10)").IsRequired(false).IsUnicode(false).HasMaxLength(10);
        }
    }

    // Task
    public class Task1Configuration : IEntityTypeConfiguration<Task1>
    {
        public void Configure(EntityTypeBuilder<Task1> builder)
        {
            builder.ToTable("Task", "dbo");
            builder.HasKey(x => x.TaskId).HasName("PK_Task").IsClustered();

            builder.Property(x => x.TaskId).HasColumnName(@"TaskId").HasColumnType("bigint").IsRequired().ValueGeneratedNever();
        }
    }

    // tblOrders
    public class TblOrderConfiguration : IEntityTypeConfiguration<TblOrder>
    {
        public void Configure(EntityTypeBuilder<TblOrder> builder)
        {
            builder.ToTable("tblOrders", "dbo");
            builder.HasKey(x => x.Id).HasName("PK__tblOrder__3214EC27DE21AFD8").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Added).HasColumnName(@"added").HasColumnType("datetime").IsRequired();
        }
    }

    // tblOrderErrors
    public class TblOrderErrorConfiguration : IEntityTypeConfiguration<TblOrderError>
    {
        public void Configure(EntityTypeBuilder<TblOrderError> builder)
        {
            builder.ToTable("tblOrderErrors", "dbo");
            builder.HasKey(x => x.Id).HasName("PK__tblOrder__3214EC27BAF60861").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Error).HasColumnName(@"error").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
        }
    }

    // tblOrderErrorsAB_
    public class TblOrderErrorsAbConfiguration : IEntityTypeConfiguration<TblOrderErrorsAb>
    {
        public void Configure(EntityTypeBuilder<TblOrderErrorsAb> builder)
        {
            builder.ToTable("tblOrderErrorsAB_", "dbo");
            builder.HasKey(x => x.Id).HasName("PK__tblOrder__3214EC2777E38424").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Error).HasColumnName(@"error").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
        }
    }

    // tblOrderLines
    public class TblOrderLineConfiguration : IEntityTypeConfiguration<TblOrderLine>
    {
        public void Configure(EntityTypeBuilder<TblOrderLine> builder)
        {
            builder.ToTable("tblOrderLines", "dbo");
            builder.HasKey(x => x.Id).HasName("PK__tblOrder__3214EC2741C7C0E7").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.OrderId).HasColumnName(@"OrderID").HasColumnType("int").IsRequired();
            builder.Property(x => x.Sku).HasColumnName(@"sku").HasColumnType("varchar(15)").IsRequired(false).IsUnicode(false).HasMaxLength(15);

            // Foreign keys
            builder.HasOne(a => a.TblOrder).WithMany(b => b.TblOrderLines).HasForeignKey(c => c.OrderId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("tblOrdersFK");

            builder.HasIndex(x => x.OrderId).HasDatabaseName("IX_tblOrderLines_OrderID");
        }
    }

    // Ticket
    public class TicketConfiguration : IEntityTypeConfiguration<Ticket>
    {
        public void Configure(EntityTypeBuilder<Ticket> builder)
        {
            builder.ToTable("Ticket", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_Ticket").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("bigint").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.CreatedById).HasColumnName(@"CreatedById").HasColumnType("bigint").IsRequired();
            builder.Property(x => x.ModifiedById).HasColumnName(@"ModifiedById").HasColumnType("bigint").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.CreatedBy).WithMany(b => b.Tickets_CreatedById).HasForeignKey(c => c.CreatedById).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Ticket_AppUser");
            builder.HasOne(a => a.ModifiedBy).WithMany(b => b.Tickets_ModifiedById).HasForeignKey(c => c.ModifiedById).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Ticket_AppUser1");

            builder.HasIndex(x => x.CreatedById).HasDatabaseName("IX_Ticket_CreatedById");
            builder.HasIndex(x => x.ModifiedById).HasDatabaseName("IX_Ticket_ModifiedById");
        }
    }

    // Token
    public class TokenConfiguration : IEntityTypeConfiguration<Token>
    {
        public void Configure(EntityTypeBuilder<Token> builder)
        {
            builder.ToTable("Token", "dbo");
            builder.HasKey(x => x.Id).HasName("PK__Token__3214EC0780725089").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.Enabled).HasColumnName(@"Enabled").HasColumnType("bit").IsRequired();
        }
    }

    // User
    public class UserConfiguration : IEntityTypeConfiguration<User>
    {
        public void Configure(EntityTypeBuilder<User> builder)
        {
            builder.ToTable("User", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_Contacts").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.ExternalUserId).HasColumnName(@"ExternalUserID").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
        }
    }

    // User309
    public class User309Configuration : IEntityTypeConfiguration<User309>
    {
        public void Configure(EntityTypeBuilder<User309> builder)
        {
            builder.ToTable("User309", "dbo");
            builder.HasKey(x => x.UserId).HasName("PK_User309").IsClustered();

            builder.Property(x => x.UserId).HasColumnName(@"UserID").HasColumnType("bigint").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.Lastname).HasColumnName(@"Lastname").HasColumnType("nvarchar(100)").IsRequired().HasMaxLength(100);
            builder.Property(x => x.Firstname).HasColumnName(@"Firstname").HasColumnType("nvarchar(100)").IsRequired().HasMaxLength(100);
            builder.Property(x => x.PhoneCountryId).HasColumnName(@"PhoneCountryID").HasColumnType("int").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.Country).WithMany(b => b.User309).HasForeignKey(c => c.PhoneCountryId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_User309_PhoneCountry");

            builder.HasIndex(x => x.PhoneCountryId).HasDatabaseName("IX_User309_PhoneCountryID");
        }
    }

    // User_Document
    public class UserDocumentConfiguration : IEntityTypeConfiguration<UserDocument>
    {
        public void Configure(EntityTypeBuilder<UserDocument> builder)
        {
            builder.ToTable("User_Document", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_User_Document").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.UserId).HasColumnName(@"UserID").HasColumnType("int").IsRequired();
            builder.Property(x => x.CreatedByUserId).HasColumnName(@"CreatedByUserID").HasColumnType("int").IsRequired();

            // Foreign keys
            builder.HasOne(a => a.CreatedByUser).WithMany(b => b.UserDocuments_CreatedByUserId).HasForeignKey(c => c.CreatedByUserId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_User_Document_User1");
            builder.HasOne(a => a.User_UserId).WithMany(b => b.UserDocuments_UserId).HasForeignKey(c => c.UserId).HasConstraintName("FK_User_Document_User");

            builder.HasIndex(x => x.CreatedByUserId).HasDatabaseName("IX_User_Document_CreatedByUserID");
            builder.HasIndex(x => x.UserId).HasDatabaseName("IX_User_Document_UserID");
        }
    }


    #endregion

}
// </auto-generated>
